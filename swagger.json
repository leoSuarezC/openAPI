{
  "openapi": "3.0.1",
  "info": {
    "title": "Novari Identity Web API",
    "version": "v1"
  },
  "paths": {
    "/api/v1/Account/Role": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves a list of roles",
        "responses": {
          "200": {
            "description": "Returns a list of roles for the application",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.ApplicationRoles"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.ApplicationRoles"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.ApplicationRoles"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve roles"
          },
          "500": {
            "description": "If the server failed to retrieve the list of roles"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Add roles for a person",
        "requestBody": {
          "description": "Model to add roles for a person",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.SaveAccountRolesCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.SaveAccountRolesCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.SaveAccountRolesCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.SaveAccountRolesCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the roles were added successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized to add roles for a person"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add the roles for the person"
          }
        }
      }
    },
    "/api/v1/Account/{accountId}/ApplicationAccess": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve an account's access to platform applications",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Id of the account.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the application access for an account.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountApplicationAccessQueryResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountApplicationAccessQueryResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountApplicationAccessQueryResult"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application."
          },
          "500": {
            "description": "If the server failed to retrieve the account's application access."
          }
        }
      }
    },
    "/api/v1/Account/{accountId}/Authenticators": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves an account's configured authenticators.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The identifier of the account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the configured authenticators for the account.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountAuthenticatorsQueryResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountAuthenticatorsQueryResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountAuthenticatorsQueryResult"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application."
          },
          "403": {
            "description": "If the user is not authorized to retrieve authenticators."
          },
          "404": {
            "description": "If the account does not exist."
          },
          "500": {
            "description": "If the server failed to retrieve the configured authenticators."
          }
        }
      }
    },
    "/api/v1/Account/{accountId}/NovariApps": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve an account's Novari Applications.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Id of the account.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an account's applications.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application."
          },
          "403": {
            "description": "If the user is not authorized to retrieve the account's applications."
          },
          "500": {
            "description": "If the server failed to retrieve an account's list of applications."
          },
          "404": {
            "description": "If the list of account's applications could not be found."
          }
        }
      }
    },
    "/api/v1/Account/{accountId}/Role": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves the roles for an account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Id of the account.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of roles for an account.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application."
          },
          "403": {
            "description": "If the user is not authorized to retrieve the account's roles."
          },
          "500": {
            "description": "If the server failed to retrieve the list of roles."
          }
        }
      }
    },
    "/api/v1/{emailAddress}/Account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves an account's Person ID searched by email address",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account's Person ID associated with the e-mail address",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.ApplicationRoles"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.ApplicationRoles"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.ApplicationRoles"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "If the server failed to retrieve the list of roles"
          }
        }
      }
    },
    "/api/v1/Account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a account for a person",
        "requestBody": {
          "description": "Model to create a new account",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.AddAccountCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.AddAccountCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.AddAccountCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.AddAccountCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When the account was created successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized to create an account for person"
          },
          "404": {
            "description": "If the person could not be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to create the account"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update a person's account",
        "requestBody": {
          "description": "Model to update an account",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.UpdateAccountCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.UpdateAccountCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.UpdateAccountCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.UpdateAccountCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the account was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized to update a person's account"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the account"
          }
        }
      }
    },
    "/api/v1/Account/{accountId}/Authenticators/MobilePhone": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Add a mobile phone authenticator.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The identifier of the account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Model to add a new mobile phone authenticator.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Authenticators.AddMobilePhoneAuthenticatorCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Authenticators.AddMobilePhoneAuthenticatorCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Authenticators.AddMobilePhoneAuthenticatorCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Authenticators.AddMobilePhoneAuthenticatorCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the authenticator was added successfully."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application."
          },
          "403": {
            "description": "If the user is not authorized to add the mobile phone authenticator."
          },
          "409": {
            "description": "If the authenticator identifier is already in use."
          },
          "500": {
            "description": "If the server failed to add the mobile phone authenticator."
          }
        }
      }
    },
    "/api/v1/Account/Activate": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Activate a person's account",
        "requestBody": {
          "description": "Model to activate an account",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ActivateAccountCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ActivateAccountCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ActivateAccountCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ActivateAccountCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the account was activated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to activate an account"
          },
          "404": {
            "description": "If the account cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to activate the account"
          }
        }
      }
    },
    "/api/v1/Account/Deactivate": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Deactivate a person's account",
        "requestBody": {
          "description": "Model to deactivate an account",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.DeactivateAccountCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.DeactivateAccountCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.DeactivateAccountCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.DeactivateAccountCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the account was deactivated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to deactivate an account"
          },
          "404": {
            "description": "If the account cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to deactivate the account"
          }
        }
      }
    },
    "/api/v1/Account/Password": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Update a person's account password",
        "requestBody": {
          "description": "Model to update an account password",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the account's password was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to change an account's password"
          },
          "404": {
            "description": "If the account cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the account's password"
          }
        }
      }
    },
    "/api/v1/Account/PasswordSelfService": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Update a person's own account password",
        "requestBody": {
          "description": "Model to update an account password.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordSelfServiceCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordSelfServiceCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordSelfServiceCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordSelfServiceCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the account's password was updated successfully."
          },
          "400": {
            "description": "When the request model failed validation.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application."
          },
          "403": {
            "description": "If the user does not have permission to change an account's password."
          },
          "404": {
            "description": "If the account cannot be found."
          },
          "500": {
            "description": "If the server failed to update the account's password."
          }
        }
      }
    },
    "/api/v1/Account/{accountId}/Authenticators/{authenticatorId}": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Deletes an authenticator belonging to an account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The identifier of the account.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "authenticatorId",
            "in": "path",
            "description": "The identifier of the authenticator.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the authenticator was deleted successfully."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application."
          },
          "403": {
            "description": "If the user is not authorized to delete the mobile phone authenticator."
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "If the server failed to delete the mobile phone authenticator."
          }
        }
      }
    },
    "/api/v1/Campaign/{campaignId}/Details": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieves the details for a campaign",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the campaign",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns details for the campaign",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.CampaignDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.CampaignDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.CampaignDetails"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the campaign could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the campaign's details"
          }
        }
      }
    },
    "/api/v1/Campaign": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieves a list of campaigns",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status of the campaign",
            "schema": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of campaigns",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Campaign"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Campaign"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Campaign"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of campaigns"
          }
        }
      },
      "put": {
        "tags": [
          "Campaign"
        ],
        "summary": "Create or update a campaign",
        "requestBody": {
          "description": "Model to create or update a campaign",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveCampaignCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveCampaignCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveCampaignCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveCampaignCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the campaign was created or updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add or update the campaign"
          }
        }
      }
    },
    "/api/v1/Campaign/{campaignId}/Task": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieves a list of tasks for a campaign",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the campaign",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of tasks for a campaign",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.CampaignTasks"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.CampaignTasks"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.CampaignTasks"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of tasks"
          }
        }
      }
    },
    "/api/v1/Campaign/{campaignId}/Task/Unassigned/Person/{personId}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieves a list of tasks for a given campaign not tied to a given person",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the campaign",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of tasks for a given campaign not tied to a given person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.PersonUnassignedCampaignTask"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.PersonUnassignedCampaignTask"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.PersonUnassignedCampaignTask"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of tasks"
          }
        }
      }
    },
    "/api/v1/Campaign/List": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieves a list of campaigns",
        "requestBody": {
          "description": "Model to filter the campaigns by",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetCampaignListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetCampaignListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetCampaignListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetCampaignListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of campaigns",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.CampaignList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.CampaignList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.CampaignList"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of campaigns"
          }
        }
      }
    },
    "/api/v1/Campaign/{campaignId}/Designation/{designationId}/ChildHealthNetwork/{childHealthNetworkId}/Roster/{rosterId}/SeenCount": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieve the count of people seen during a campaign",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the campaign",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "designationId",
            "in": "path",
            "description": "Id of the designation for the campaign",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "childHealthNetworkId",
            "in": "path",
            "description": "Id of Child health network",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "rosterId",
            "in": "path",
            "description": "Id of the Roster",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the count of people seen during a campaign",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.PeopleSeenCounts"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.PeopleSeenCounts"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.PeopleSeenCounts"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the campaign was not found"
          },
          "500": {
            "description": "If the server failed to retrieve the count of physicians"
          }
        }
      }
    },
    "/api/v1/Campaign/{campaignId}/TaskType/{taskTypeId}/ChildHealthNetwork/{childHealthNetworkId}/Roster/{rosterId}/Completion": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieve a list tasks with their completed and uncompleted counts",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the campaign",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskTypeId",
            "in": "path",
            "description": "Id of the task type to filter by",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "childHealthNetworkId",
            "in": "path",
            "description": "Id of the child health network to filter by",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "rosterId",
            "in": "path",
            "description": "Id of the roster to filter by",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of completed tasks",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.TaskCompletion"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.TaskCompletion"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.TaskCompletion"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of completed tasks"
          }
        }
      }
    },
    "/api/v1/Campaign/Interaction": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Create an interaction for a campaign",
        "requestBody": {
          "description": "Model to create an interaction",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.AddInteractionCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.AddInteractionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.AddInteractionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.AddInteractionCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the interaction was created successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add the interaction"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an interaction",
        "requestBody": {
          "description": "Model to create or update an interaction",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.UpdateInteractionCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.UpdateInteractionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.UpdateInteractionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.UpdateInteractionCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the campaign was created or updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the interaction could not be found"
          },
          "500": {
            "description": "If the server failed to update the interaction"
          }
        }
      }
    },
    "/api/v1/Campaign/Download": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieves the URL to download a CSV of campaign data",
        "requestBody": {
          "description": "Ids of the campaigns",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a URL to download a CSV of campaign data",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the download URL"
          }
        }
      }
    },
    "/api/v1/Campaign/Activate": {
      "patch": {
        "tags": [
          "Campaign"
        ],
        "summary": "Activate a campaign",
        "requestBody": {
          "description": "Model to activate a campaign",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.ActivateCampaignCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.ActivateCampaignCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.ActivateCampaignCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.ActivateCampaignCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the campaign was activated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the campaign cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to activate the campaign"
          }
        }
      }
    },
    "/api/v1/Campaign/Complete": {
      "patch": {
        "tags": [
          "Campaign"
        ],
        "summary": "Complete a campaign",
        "requestBody": {
          "description": "Model to complete a campaign",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.CompleteCampaignCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.CompleteCampaignCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.CompleteCampaignCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.CompleteCampaignCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the campaign was activated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the campaign cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to complete the campaign"
          }
        }
      }
    },
    "/api/v1/Clients": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Retrieves a list of roles",
        "parameters": [
          {
            "name": "includeAllClients",
            "in": "query",
            "description": "queryOrchestrator",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of clients for the current user",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Models.ClientLookup"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Models.ClientLookup"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Models.ClientLookup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "If the server failed to retrieve the list of clients"
          }
        }
      }
    },
    "/api/v1/clients/{clientId}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Retrieves a client information",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a client",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Clients.GetClientByIdQueryResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Clients.GetClientByIdQueryResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Clients.GetClientByIdQueryResult"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "If the server failed to retrieve of client"
          }
        }
      }
    },
    "/api/v1/Communication/Recipient": {
      "get": {
        "tags": [
          "Communication"
        ],
        "summary": "Retrieve a list communications recipients based on a search filter.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "String to filter recipients by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of communication recipients",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.RecipientSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.RecipientSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.RecipientSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of recipients"
          }
        }
      }
    },
    "/api/v1/Communication/Recipient/Count": {
      "get": {
        "tags": [
          "Communication"
        ],
        "summary": "Retrieve a count of communication recipients based on a search filter.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "String to filter recipients by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a count of communication recipients",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the count of recipients"
          }
        }
      }
    },
    "/api/v1/Communication/List": {
      "post": {
        "tags": [
          "Communication"
        ],
        "summary": "Retrieve a list of communications",
        "requestBody": {
          "description": "Model to retrieve the list of communications",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of communications",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of communications"
          }
        }
      }
    },
    "/api/v1/Communication/Details": {
      "post": {
        "tags": [
          "Communication"
        ],
        "summary": "Retrieve a list of communication details",
        "requestBody": {
          "description": "Model to retrieve the list of communication details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationDetailsQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationDetailsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationDetailsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationDetailsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of communication details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationDetailsList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationDetailsList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationDetailsList"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of communications details"
          }
        }
      }
    },
    "/api/v1/Communication": {
      "post": {
        "tags": [
          "Communication"
        ],
        "summary": "Queues a communication to be sent to recipients",
        "requestBody": {
          "description": "Model to queue the communication",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Communications.SendCommunicationCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Communications.SendCommunicationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Communications.SendCommunicationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Communications.SendCommunicationCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the communication was sent successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to queue the communication"
          }
        }
      }
    },
    "/api/v1/Me/Dashboard": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Retrieve the currently logged in user's dashboard configuration.",
        "responses": {
          "200": {
            "description": "Returns a dashboard configuration",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.UserDashboardConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.UserDashboardConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.UserDashboardConfig"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the dashboard configuration"
          }
        }
      }
    },
    "/api/v1/Dashboard/Campaign/Current": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Retrieve a list of all current campaigns",
        "responses": {
          "200": {
            "description": "Returns a list of campaigns",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Campaign"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Campaign"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Campaign"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of campaigns"
          }
        }
      }
    },
    "/api/v1/Me/Dashboard/Interaction/Current": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Retrieve a list of the current interaction summaries for the currently logged in user.",
        "responses": {
          "200": {
            "description": "Returns a list of interactions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.UserInteractionSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.UserInteractionSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.UserInteractionSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of current interactions"
          }
        }
      }
    },
    "/api/v1/Me/Dashboard/Interaction/Recent": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Retrieve a list of recent interactions from the past week for the currently logged in user.",
        "responses": {
          "200": {
            "description": "Returns a list of interactions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.UserInteractionSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.UserInteractionSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Dashboard.UserInteractionSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of interactions"
          }
        }
      }
    },
    "/api/v1/Delegate/{delegateId}/Persons": {
      "get": {
        "tags": [
          "Delegate"
        ],
        "summary": "Retrieves a list of persons for a given delegate",
        "parameters": [
          {
            "name": "delegateId",
            "in": "path",
            "description": "Id of the delegate to retrieve their persons",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of persons for a delegate",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.UserProfile.UserDelegatedByPersons"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.UserProfile.UserDelegatedByPersons"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.UserProfile.UserDelegatedByPersons"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of persons"
          }
        }
      }
    },
    "/api/v1/Filter/Option": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Retrieve a list of filter options",
        "parameters": [
          {
            "name": "filterType",
            "in": "query",
            "description": "The type of filter",
            "schema": {
              "$ref": "#/components/schemas/Novari.Identity.Models.FilterType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filter options",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.FilterOption"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.FilterOption"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.FilterOption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of filter options"
          }
        }
      }
    },
    "/api/v1/Filter/{filterId}/LookupList": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Retrieve a list of filter lookups",
        "parameters": [
          {
            "name": "filterId",
            "in": "path",
            "description": "Id of the filter",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filter lookups",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of filter lookups"
          }
        }
      }
    },
    "/api/v1/Filter/Summary": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Retrieve a list of summaries for a filter string",
        "parameters": [
          {
            "name": "filterType",
            "in": "query",
            "description": "The type of filter",
            "schema": {
              "$ref": "#/components/schemas/Novari.Identity.Models.FilterType"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a summary for a filter string",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.ListFilters.FilterSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.ListFilters.FilterSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.ListFilters.FilterSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the summary for the filter string"
          }
        }
      }
    },
    "/api/v1/Me/Filter": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Retrieve a list of the user's filters for the currently logged in user",
        "parameters": [
          {
            "name": "filterType",
            "in": "query",
            "description": "The type of filter",
            "schema": {
              "$ref": "#/components/schemas/Novari.Identity.Models.FilterType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of the currently logged in user's filters",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.ListFilter"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.ListFilter"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.ListFilter"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of filters"
          }
        }
      },
      "put": {
        "tags": [
          "Filter"
        ],
        "summary": "Create or update a filter for the currently logged in user",
        "requestBody": {
          "description": "Model to add or update a filter",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.ListFilters.SaveUserListFilterCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.ListFilters.SaveUserListFilterCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.ListFilters.SaveUserListFilterCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.ListFilters.SaveUserListFilterCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the filter has been added or updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add or update the filter"
          }
        }
      },
      "patch": {
        "tags": [
          "Filter"
        ],
        "summary": "Delete a filter for the currently logged in user",
        "requestBody": {
          "description": "Model to delete a filter",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.ListFilters.DeleteUserListFilterCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.ListFilters.DeleteUserListFilterCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.ListFilters.DeleteUserListFilterCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.ListFilters.DeleteUserListFilterCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When the filter has been deleted successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to delete the filter"
          }
        }
      }
    },
    "/api/v1/Filter": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Retrieve a list of filters for all users",
        "parameters": [
          {
            "name": "filterType",
            "in": "query",
            "description": "The type of filter",
            "schema": {
              "$ref": "#/components/schemas/Novari.Identity.Models.FilterType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filters for all users",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.ListFilter"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.ListFilter"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.ListFilter"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of filters"
          }
        }
      }
    },
    "/api/v1/Interaction/{interactionId}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Retrieves details for an interaction",
        "parameters": [
          {
            "name": "interactionId",
            "in": "path",
            "description": "Id of the interaction",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an interaction's details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.InteractionDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.InteractionDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.InteractionDetails"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the interaction's details could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the interaction's details"
          }
        }
      }
    },
    "/api/v1/Interaction/Person/{personId}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Retrieves a list of interactions for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person to filter the interactions by",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "interactionStatusId",
            "in": "query",
            "description": "Status of the interaction",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of interactions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.InteractionSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.InteractionSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.InteractionSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of interactions"
          }
        }
      }
    },
    "/api/v1/Interaction/{interactionId}/Note": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Retrieves a list of notes for an interaction",
        "parameters": [
          {
            "name": "interactionId",
            "in": "path",
            "description": "Id of the interaction",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notes for an interaction",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.NoteSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.NoteSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.NoteSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of notes"
          }
        }
      }
    },
    "/api/v1/Interaction/Location": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Retrieves a list of possible interaction locations for a list of people",
        "requestBody": {
          "description": "Model to retrieve a list of possible interaction locations",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetInteractionLocationLookupsQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetInteractionLocationLookupsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetInteractionLocationLookupsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetInteractionLocationLookupsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a a list of possible interaction locations",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of possible interaction locations"
          }
        }
      }
    },
    "/api/v1/Interaction/Note": {
      "patch": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create or update an interaction's note",
        "requestBody": {
          "description": "Model to create or update an interactions note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveNoteCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveNoteCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveNoteCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveNoteCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the note was created or updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add or update the note"
          }
        }
      }
    },
    "/api/v1/Interaction": {
      "patch": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete an interaction",
        "requestBody": {
          "description": "Model to delete an interaction",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.DeleteInteractionCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.DeleteInteractionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.DeleteInteractionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.DeleteInteractionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When the interaction has been deleted successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the interaction could not be foundn"
          },
          "500": {
            "description": "If the server failed to delete the interaction"
          }
        }
      }
    },
    "/api/v1/Location/{locationId}/Person": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves a list of persons for a location",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "Id of the location",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of persons for a location",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationPerson"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationPerson"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationPerson"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of persons for a locations"
          }
        }
      }
    },
    "/api/v1/Location/{locationId}/Organization": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves a list of organizations for a location",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "Id of the location",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of organizations for a location",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationOrganizations"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationOrganizations"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationOrganizations"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of organizations for a locations"
          }
        }
      }
    },
    "/api/v1/Location/{locationId}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves the details for a location",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "Id of the location",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details for a location",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationDetails"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the location could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the details for a locations"
          }
        }
      }
    },
    "/api/v1/Location/{locationId}/HasAtc": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves the HasATC Flag for a location",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "Id of the location",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the value of HasATC for a location",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the location could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the details for a locations"
          }
        }
      }
    },
    "/api/v1/Location/{locationId}/Person/{personId}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves the details for a location and person",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "Id of the location",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details for a location and person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Shared.PersonLocationDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Shared.PersonLocationDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Shared.PersonLocationDetails"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the details for the location and person"
          },
          "404": {
            "description": "If the details could not be found"
          }
        }
      }
    },
    "/api/v1/Location": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves a list of locations matching a search string",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "String to search by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeHospitals",
            "in": "query",
            "description": "Boolean to include or exclude hospitals from the search",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of locations",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of locations"
          }
        }
      },
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Creates a location",
        "requestBody": {
          "description": "Model to add the location",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.AddLocationCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.AddLocationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.AddLocationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.AddLocationCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the location was created successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized to add a location"
          },
          "409": {
            "description": "If the location already exists"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to create the location"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Updates the details for a location",
        "requestBody": {
          "description": "Model to update the location",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationDetailsCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationDetailsCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationDetailsCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationDetailsCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the location was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the location could not be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the location"
          }
        }
      }
    },
    "/api/v1/Location/Hierarchy": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves a locations hierarchy",
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "description": "locationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the location hierarchy",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the location could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the location hierarchy"
          }
        }
      }
    },
    "/api/v1/Location/Download": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves the URL to download a CSV of location data",
        "requestBody": {
          "description": "Query to download a list of locations",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadLocationListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadLocationListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadLocationListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadLocationListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a URL to download a CSV of location data",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the download URL"
          }
        }
      }
    },
    "/api/v1/Location/List": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves a list of locations",
        "requestBody": {
          "description": "Model to filter the locations by",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetLocationListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetLocationListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetLocationListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetLocationListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of locations",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.LocationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.LocationList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.LocationList"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of locations"
          }
        }
      }
    },
    "/api/v2/Location/List": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieves a list of locations",
        "requestBody": {
          "description": "Model to filter the locations by",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetInfiniteScrollLocationListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetInfiniteScrollLocationListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetInfiniteScrollLocationListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetInfiniteScrollLocationListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of locations",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.LocationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.LocationList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.LocationList"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of locations"
          }
        }
      }
    },
    "/api/v1/Location/Person": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Adds a person to a location",
        "requestBody": {
          "description": "Model to add a person to a location",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonLocationXrefCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonLocationXrefCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonLocationXrefCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonLocationXrefCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the location was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "409": {
            "description": "If the person is already a part of the location"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the location"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Updates a person/location details",
        "requestBody": {
          "description": "Model to update a person/location details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonLocationXrefCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonLocationXrefCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonLocationXrefCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonLocationXrefCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the person/location was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "409": {
            "description": "If the person is not a part of the location"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the person/location"
          }
        }
      },
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Remove a person from a location",
        "requestBody": {
          "description": "Model to remove a person from a location",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonLocationXrefCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonLocationXrefCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonLocationXrefCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonLocationXrefCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the person was removed from the location successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "409": {
            "description": "If the person is not part of the location"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to remove the person from the location"
          }
        }
      }
    },
    "/api/v1/Location/Parent": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Adds a person to a location",
        "requestBody": {
          "description": "Model to save a locations parentId",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.UpdateParentLocationCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.UpdateParentLocationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.UpdateParentLocationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.UpdateParentLocationCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the location was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the location"
          }
        }
      }
    },
    "/api/v1/Location/Queue": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Adds one or more queues to to a location",
        "requestBody": {
          "description": "Model to save a locations queues",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationQueuesCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationQueuesCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationQueuesCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationQueuesCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the location was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the location"
          }
        }
      }
    },
    "/api/v1/Location/Hours": {
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Updates a location's hours",
        "requestBody": {
          "description": "Model to update a location's hours",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationHoursCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationHoursCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationHoursCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationHoursCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the location's hours have been updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the location could not be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the location's hours"
          }
        }
      }
    },
    "/api/v1/Location/HasAtc": {
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Updates the HasATC for a location",
        "requestBody": {
          "description": "Model to update the HasATC for a location",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.UpdateLocationHasAtcFlagCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.UpdateLocationHasAtcFlagCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.UpdateLocationHasAtcFlagCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Locations.UpdateLocationHasAtcFlagCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the HasATC was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the location could not be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the HasATC"
          }
        }
      }
    },
    "/api/v2/Location/{locationId}": {
      "get": {
        "tags": [
          "LocationControllerV2"
        ],
        "summary": "Retrieves the details for a location",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "Id of the location",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details for a location",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationDetailsInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationDetailsInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationDetailsInfo"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the location could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the details for a locations"
          }
        }
      }
    },
    "/api/v1/Metadata/Province": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of provinces",
        "responses": {
          "200": {
            "description": "Returns a list of provinces",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of provinces"
          }
        }
      }
    },
    "/api/v1/Metadata/Person/Details": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve lookups for person details",
        "responses": {
          "200": {
            "description": "Returns a person's details lookups",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.PersonDetailsLookups"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.PersonDetailsLookups"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.PersonDetailsLookups"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the lookups"
          }
        }
      }
    },
    "/api/v1/Metadata/Location/Details": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve lookups for location details",
        "responses": {
          "200": {
            "description": "Returns a location's details lookups",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.LocationDetailsLookups"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.LocationDetailsLookups"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.LocationDetailsLookups"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the lookups"
          }
        }
      }
    },
    "/api/v1/Metadata/Accessibility": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of accessibilities",
        "responses": {
          "200": {
            "description": "Returns a list of accessibilities",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Accessibility"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Accessibility"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Accessibility"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of accessibilities"
          }
        }
      }
    },
    "/api/v1/Metadata/HealthNetwork/Child": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of child health networks (Sub-LHINs)",
        "responses": {
          "200": {
            "description": "Returns a list of child health networks",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of health networks"
          }
        }
      }
    },
    "/api/v1/Metadata/HealthNetwork/{parentHealthNetworkId}/Child": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of child health networks (Sub-LHINs)",
        "parameters": [
          {
            "name": "parentHealthNetworkId",
            "in": "path",
            "description": "parentHealthNetworkId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of child health networks",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of health networks"
          }
        }
      }
    },
    "/api/v1/Metadata/ContactPreference": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of contact preferences",
        "responses": {
          "200": {
            "description": "Returns a list of contact preferences",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.ContactPreference"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.ContactPreference"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.ContactPreference"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of contact preferences"
          }
        }
      }
    },
    "/api/v1/Metadata/CulturalCompetency": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of cultural competencies",
        "responses": {
          "200": {
            "description": "Returns a list of cultural competencies",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.CulturalCompetency"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.CulturalCompetency"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.CulturalCompetency"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of cultural competencies"
          }
        }
      }
    },
    "/api/v1/Metadata/Designation": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of designations",
        "responses": {
          "200": {
            "description": "Returns a list of designations",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.DesignationList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.DesignationList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.DesignationList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of designations"
          }
        }
      }
    },
    "/api/v1/Metadata/Gender": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of genders",
        "responses": {
          "200": {
            "description": "Returns a list of genders",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of genders"
          }
        }
      }
    },
    "/api/v1/Metadata/InteractionInitiator": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of interaction initiators",
        "responses": {
          "200": {
            "description": "Returns a list of interaction initiators",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.InteractionInitiator"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.InteractionInitiator"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.InteractionInitiator"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of interaction initiators"
          }
        }
      }
    },
    "/api/v1/Metadata/InteractionType": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of interaction types",
        "responses": {
          "200": {
            "description": "Returns a list of interaction types",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.InteractionType"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.InteractionType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.InteractionType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of interaction types"
          }
        }
      }
    },
    "/api/v1/Metadata/Interest": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of interests",
        "responses": {
          "200": {
            "description": "Returns a list of interests",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Interest"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Interest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Interest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of interests"
          }
        }
      }
    },
    "/api/v1/Metadata/Language": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of languages",
        "responses": {
          "200": {
            "description": "Returns a list of languages",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of languages"
          }
        }
      }
    },
    "/api/v1/Metadata/LocationType": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of location types",
        "responses": {
          "200": {
            "description": "Returns a list of location types",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LocationType"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LocationType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LocationType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of location types"
          }
        }
      }
    },
    "/api/v1/Metadata/NoteTag": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of note tags",
        "responses": {
          "200": {
            "description": "Returns a list of note tags",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.NoteTag"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.NoteTag"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.NoteTag"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of note tags"
          }
        }
      }
    },
    "/api/v1/Metadata/OrganizationType": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of organization types",
        "responses": {
          "200": {
            "description": "Returns a list of organization types",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.OrganizationType"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.OrganizationType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.OrganizationType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of organization tags"
          }
        }
      }
    },
    "/api/v1/Metadata/HealthNetwork/Parent": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of parent health networks",
        "responses": {
          "200": {
            "description": "Returns a list of parent health networks",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of health networks"
          }
        }
      }
    },
    "/api/v1/Metadata/PEM": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of PEM",
        "responses": {
          "200": {
            "description": "Returns a list of PEM",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.PEM"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.PEM"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.PEM"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of PEM"
          }
        }
      }
    },
    "/api/v1/Metadata/Privilege": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of privileges",
        "responses": {
          "200": {
            "description": "Returns a list of privileges",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Privilege"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Privilege"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Privilege"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of privileges"
          }
        }
      }
    },
    "/api/v1/Metadata/PhoneNumberType": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of phone number types",
        "responses": {
          "200": {
            "description": "Returns a list of phone number types",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of phone number types"
          }
        }
      }
    },
    "/api/v1/Metadata/TaskType/{taskTypeId}/TaskOutcome": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of task outcomes",
        "parameters": [
          {
            "name": "taskTypeId",
            "in": "path",
            "description": "Id of the task type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of task outcomes",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.TaskOutcome"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.TaskOutcome"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.TaskOutcome"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of task outcomes"
          }
        }
      }
    },
    "/api/v1/Metadata/TaskTag": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of task tags",
        "responses": {
          "200": {
            "description": "Returns a list of task tags",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.TaskTag"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.TaskTag"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.TaskTag"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of task tags"
          }
        }
      }
    },
    "/api/v1/Metadata/TaskType": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of task types",
        "responses": {
          "200": {
            "description": "Returns a list of task types",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.TaskType"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.TaskType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.TaskType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of task types"
          }
        }
      }
    },
    "/api/v1/Metadata/Technology": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of technologies",
        "responses": {
          "200": {
            "description": "Returns a list of technologies",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.TechnologyLists"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.TechnologyLists"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.TechnologyLists"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of technologies"
          }
        }
      }
    },
    "/api/v1/Metadata/Status/Person": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of person statuses",
        "responses": {
          "200": {
            "description": "Returns a list of person statuses",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of person statuses"
          }
        }
      }
    },
    "/api/v1/Metadata/Status/Location": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of location statuses",
        "responses": {
          "200": {
            "description": "Returns a list of location statuses",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of location statuses"
          }
        }
      }
    },
    "/api/v1/Metadata/Status/Task": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of task statuses",
        "responses": {
          "200": {
            "description": "Returns a list of task statuses",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of task statuses"
          }
        }
      }
    },
    "/api/v1/Metadata/Status/Interaction": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of interaction statuses",
        "responses": {
          "200": {
            "description": "Returns a list of interaction statuses",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.InteractionStatus"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.InteractionStatus"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.InteractionStatus"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of interaction statuses"
          }
        }
      }
    },
    "/api/v1/Metadata/Status/Campaign": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of campaign statuses",
        "responses": {
          "200": {
            "description": "Returns a list of campaign statuses",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Services.StatusLookup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of campaign statuses"
          }
        }
      }
    },
    "/api/v1/Metadata/Location/Pharmacy/{pharmacyId}": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of pharmacy locations filtered by search terms or by pharmacy id",
        "parameters": [
          {
            "name": "searchTerms",
            "in": "query",
            "description": "Terms to filter the pharmacies by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pharmacyId",
            "in": "query",
            "description": "Id of the pharmacy",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of locations",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Location"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Location"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the search terms are less than 3 characters or white space"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of locations"
          }
        }
      }
    },
    "/api/v1/Metadata/DesignationField": {
      "post": {
        "tags": [
          "Metadata"
        ],
        "summary": "Retrieve a list of designation fields for designations",
        "requestBody": {
          "description": "List of designation ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of designation fields",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.DesignationFields"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.DesignationFields"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.DesignationFields"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of designation fields"
          }
        }
      }
    },
    "/api/v1/Organization/{organizationId}/Member": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves a list of organization members",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of organization members",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationMembers"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationMembers"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationMembers"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of organization members"
          }
        }
      }
    },
    "/api/v1/Organization/{organizationId}/Location": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves a list of organization locations",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of organization locations",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationLocations"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationLocations"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationLocations"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of organization locations"
          }
        }
      }
    },
    "/api/v1/Organization/{organizationId}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves details for an organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an organization's details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationDetails"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If organization could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the organization's details"
          }
        }
      }
    },
    "/api/v1/Organization": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieve a list of organizations matching a search string",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "String to search by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of matching organizations",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the organizations"
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Create or update an organization",
        "requestBody": {
          "description": "Model to create or update the organization",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Organizations.SaveOrganizationDetailsCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Organizations.SaveOrganizationDetailsCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Organizations.SaveOrganizationDetailsCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Organizations.SaveOrganizationDetailsCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the organization was created or updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized to create or update an organization"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to create or update the organization"
          }
        }
      }
    },
    "/api/v1/Organization/{organizationId}/EvisitProviders": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves a list of organization providers",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of organization providers",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of organization providers"
          }
        }
      }
    },
    "/api/v1/Organization/List": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves a list of organizations",
        "requestBody": {
          "description": "Model to filter the organizations by",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetOrganizationListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetOrganizationListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetOrganizationListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetOrganizationListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of organizations",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.OrganizationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.OrganizationList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.OrganizationList"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of organizations"
          }
        }
      }
    },
    "/api/v1/Organization/Location": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Adds a location to an organization",
        "requestBody": {
          "description": "Model to add a location to an organization",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddLocationOrganizationXrefCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddLocationOrganizationXrefCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddLocationOrganizationXrefCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddLocationOrganizationXrefCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the organization was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "409": {
            "description": "If the location is already a part of the organization"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the organization"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove a location from an organization",
        "requestBody": {
          "description": "Model to remove a location from an organization",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemoveLocationOrganizationXrefCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemoveLocationOrganizationXrefCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemoveLocationOrganizationXrefCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemoveLocationOrganizationXrefCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the location was removed from the organization successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "409": {
            "description": "If the location is not part of the organization"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to remove the location from the organization"
          }
        }
      }
    },
    "/api/v1/Organization/Person": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Adds a person to an organization",
        "requestBody": {
          "description": "Model to add a person to an organization",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonOrganizationXrefCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonOrganizationXrefCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonOrganizationXrefCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonOrganizationXrefCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the organization was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "409": {
            "description": "If the person is already a part of the organization"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the organization"
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Updates a person/organization details",
        "requestBody": {
          "description": "Model to update a person/organization details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonOrganizationXrefCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonOrganizationXrefCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonOrganizationXrefCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonOrganizationXrefCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the person/organization was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "409": {
            "description": "If the person is not a part of the organization"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the person/organization"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove a location from an organization",
        "requestBody": {
          "description": "Model to remove a person from an organization",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonOrganizationXrefCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonOrganizationXrefCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonOrganizationXrefCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonOrganizationXrefCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the person was removed from the organization successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "409": {
            "description": "If the person is not part of the organization"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to remove the person from the organization"
          }
        }
      }
    },
    "/api/v1/Organization/Download": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves the URL to download a CSV of organization data",
        "requestBody": {
          "description": "Query to download a list of organizations",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadOrganizationListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadOrganizationListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadOrganizationListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadOrganizationListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a URL to download a CSV of organization data",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the download URL"
          }
        }
      }
    },
    "/api/v1/Person/Download": {
      "post": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves the URL for the CSV file containing a list of persons",
        "requestBody": {
          "description": "downloadPersonListQuery",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadPersonListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadPersonListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadPersonListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.DownloadPersonListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the URL of CSV file containing list of persons",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the URL for the CSV file"
          }
        }
      }
    },
    "/api/v1/Person/{personId}": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's details",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDetails"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the person could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the person's details"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/BasicInfo": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's basic information",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the basic information for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonBasicInformation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonBasicInformation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonBasicInformation"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the person could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the person's basic information"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/ContactInfo": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's contact info",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDetails"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the person could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the person's contact info"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/DesignationField": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's designation fields",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the designation fields for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDesignationFields"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDesignationFields"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDesignationFields"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's designation fields"
          }
        }
      },
      "patch": {
        "tags": [
          "Person"
        ],
        "summary": "Updates a person's Designation Details",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person who the designation field details are tied to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the list of designation details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.UpdatePersonDesignationDetails"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.UpdatePersonDesignationDetails"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.UpdatePersonDesignationDetails"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.UpdatePersonDesignationDetails"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the designation fields updated successfully"
          },
          "400": {
            "description": "When the designation fields validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the designation fields"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Location": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's locations",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the locations for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonLocation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonLocation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonLocation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's locations"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Organization": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's organizations",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the organizations for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonOrganization"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonOrganization"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonOrganization"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's organizations"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Grant": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's grants",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the grants for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonGrant"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonGrant"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonGrant"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's grants"
          }
        }
      }
    },
    "/api/v1/Person": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a list of persons matching a search string",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "String to search by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of matching persons",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Shared.MatchingPerson"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Shared.MatchingPerson"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Shared.MatchingPerson"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the persons"
          }
        }
      },
      "post": {
        "tags": [
          "Person"
        ],
        "summary": "Create a person",
        "requestBody": {
          "description": "Model to create a new person",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.AddPersonCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.AddPersonCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.AddPersonCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.AddPersonCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the person was created successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized to create a new person"
          },
          "409": {
            "description": "If the person already exists"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to create the person"
          }
        }
      },
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Updates a person's details",
        "requestBody": {
          "description": "Model to update a person's details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDetailsCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDetailsCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDetailsCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDetailsCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the person was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the person was not found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to updated the person's details"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/CommunicationMethod": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a list of communication methods for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of communication methods for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonCommunicationMethods"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonCommunicationMethods"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonCommunicationMethods"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's communication methods"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Contact/Mobile": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a list of mobile numbers for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of mobile numbers for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonMobileMethod"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonMobileMethod"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonMobileMethod"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's mobile numbers"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Contact/Email": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a list of emails for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of emails for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonEmailMethod"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonEmailMethod"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonEmailMethod"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's emails"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/CommunicationPreference": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves the communication preference for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the communication preference for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user does not have access"
          },
          "404": {
            "description": "If the person is not found"
          },
          "500": {
            "description": "If the server failed to retrieve the person's communication preference"
          }
        }
      },
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Updates a person's communication preference",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Model to update a person's communication preference",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.UpdateCommunicationPreferenceCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.UpdateCommunicationPreferenceCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.UpdateCommunicationPreferenceCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.UpdateCommunicationPreferenceCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the person's communication preference was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user does not have access"
          },
          "404": {
            "description": "If the person was not found"
          },
          "500": {
            "description": "If the server failed to updated the person's communication preference"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/NotificationPreferences": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves the notification preferences for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the notification preferences for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user does not have access"
          },
          "404": {
            "description": "If the person is not found"
          },
          "500": {
            "description": "If the server failed to retrieve the person's notification preferences"
          }
        }
      },
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Updates a person's notification preferences",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "A list of notification preferences",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the person's notification preference was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user does not have access"
          },
          "404": {
            "description": "If the person was not found"
          },
          "500": {
            "description": "If the server failed to updated the person's notification preferences"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/ApplicationAccess": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's access to platform applications",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the application access for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountApplicationAccessQueryResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountApplicationAccessQueryResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountApplicationAccessQueryResult"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's application access"
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/Person/{personId}/Recipient": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a list of person recipients filtered by first and last name or email address",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "Email address of the recipient",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "First name of the recipient",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last name of the recipient",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of persons filtered by search parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.MatchedRecipient"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.MatchedRecipient"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.MatchedRecipient"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of persons"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Account": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves account details for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the a person's account details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountDetailsQueryResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountDetailsQueryResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountDetailsQueryResult"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve the person's account details"
          },
          "404": {
            "description": "If the account could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the person's account details"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Role": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves the roles for a person.",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of roles for a person.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application."
          },
          "403": {
            "description": "If the user is not authorized to retrieve the person's roles."
          },
          "500": {
            "description": "If the server failed to retrieve the list of roles."
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/Person/{personId}/Queues": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves the queues for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of queues for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve the person's roles"
          },
          "500": {
            "description": "If the server failed to retrieve the list of roles"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/AvailableQueues": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves the queues for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of queues for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonAvailableQueues"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonAvailableQueues"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonAvailableQueues"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve the person's roles"
          },
          "500": {
            "description": "If the server failed to retrieve the list of roles"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Delegate": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a list of delegates for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of delegates for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Delegates.PersonDelegates"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Delegates.PersonDelegates"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Delegates.PersonDelegates"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of delegates"
          }
        }
      }
    },
    "/api/v1/Person/Delegate": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a list of person's delegates filtered by first and last name or email address",
        "parameters": [
          {
            "name": "PersonId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EmailAddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of delegates filtered by search parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Delegates.MatchedDelegate"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Delegates.MatchedDelegate"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Delegates.MatchedDelegate"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of delegates"
          }
        }
      },
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Adds a delegate for a person",
        "requestBody": {
          "description": "Model to add a new delegate for a person",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.AddNewDelegateCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.AddNewDelegateCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.AddNewDelegateCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.AddNewDelegateCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the delegate was added successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to add a delegate for the person"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add the delegate to the person"
          }
        }
      },
      "patch": {
        "tags": [
          "Person"
        ],
        "summary": "Removes a person's delegate",
        "requestBody": {
          "description": "Model to remove a person's delegate",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.RemoveDelegateCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.RemoveDelegateCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.RemoveDelegateCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.RemoveDelegateCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When the delegate was removed successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to remove a delegate for the person"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to remove the delegate"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Task/Summary": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves a list of task summaries for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of task summaries",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.TaskSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.TaskSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.TaskSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of task summaries"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Task": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves a list of tasks for a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of tasks",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.PersonTaskSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.PersonTaskSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.PersonTaskSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of tasks"
          }
        }
      },
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Add Tasks to Person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "A list of task Ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the tasks were added to the person successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized to add a task to a person"
          },
          "409": {
            "description": "If the person already has one (or more) of the tasks"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add the task to the person"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/EngagementLocation": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves a person's locations and engagement location",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a person's locations and engagement location",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.PersonLocations"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.PersonLocations"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.PersonLocations"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's locations and engagement location"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/EngagementNote": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves a person's engagement note",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a person's engagement note",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the person's engagement note"
          }
        }
      }
    },
    "/api/v1/Person/EvisitProviders": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a list of eVisit providers filtered by last name",
        "parameters": [
          {
            "name": "lastName",
            "in": "query",
            "description": "Term to filter the persons by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of eVisit providers filtered by last name",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.EvisitProvider"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.EvisitProvider"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.EvisitProvider"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the last name is not valid"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the list of eVisit providers filtered by last name could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the list of eVisit providers"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/PrimaryLocation": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's primary location with phone numbers",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a person's primary location with phone numbers",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PrimaryLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PrimaryLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PrimaryLocation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve a person's primary location with phone numbers"
          },
          "404": {
            "description": "If the location could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve a person's primary location with phone numbers"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/NovariApps": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a person's Novari Applications",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a person applications",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve the person's applications"
          },
          "500": {
            "description": "If the server failed to retrieve a person's list of applications"
          },
          "404": {
            "description": "If the list of person's applications could not be found"
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/Person/{personId}/OrderEntryUserFacilities": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves the person's facilities",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of facilities for a person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve the person's facilities"
          },
          "500": {
            "description": "If the server failed to retrieve the list of facilities"
          }
        }
      },
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Updates a person's facilities",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "A list of update Person Facility",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.PersonFacilities"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.PersonFacilities"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.PersonFacilities"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Novari.Identity.Models.PersonFacilities"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the person's facilitye was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user does not have access"
          },
          "404": {
            "description": "If the person was not found"
          },
          "500": {
            "description": "If the server failed to updated the person's facility"
          }
        }
      }
    },
    "/api/v1/Person/OrderEntryFacilities": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve a list of facility",
        "responses": {
          "200": {
            "description": "Returns a list of locations",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Facility"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Facility"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.Facility"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of locations"
          }
        }
      }
    },
    "/api/v1/Person/List": {
      "post": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves a list of persons and the count",
        "requestBody": {
          "description": "Model to retrieve the list of persons",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.GetPersonListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.GetPersonListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.GetPersonListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.GetPersonListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of persons and the count",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonList"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of persons"
          }
        }
      }
    },
    "/api/v2/Person/List": {
      "post": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves a list of persons and the count",
        "requestBody": {
          "description": "Model to retrieve the list of persons",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.GetInfiniteScrollPersonListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.GetInfiniteScrollPersonListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.GetInfiniteScrollPersonListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.GetInfiniteScrollPersonListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of persons and the count",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonList"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of persons"
          }
        }
      }
    },
    "/api/v1/Person/Task": {
      "post": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves a list of task summaries for persons",
        "requestBody": {
          "description": "Model to retrieve a list of task summaries",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskSummariesQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskSummariesQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskSummariesQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskSummariesQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of task summaries",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.TaskSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.TaskSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.TaskSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of task summaries"
          }
        }
      }
    },
    "/api/v1/Person/LookupList": {
      "post": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieves a list of persons",
        "requestBody": {
          "description": "List of person ids to filter by",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of persons",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Shared.PersonsById"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Shared.PersonsById"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Shared.PersonsById"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of persons"
          }
        }
      }
    },
    "/api/v1/Person/Designation": {
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Updates a person's designations",
        "requestBody": {
          "description": "Model to update a person's designations",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDesignationsCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDesignationsCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDesignationsCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDesignationsCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the person was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to updated the person's designations"
          }
        }
      }
    },
    "/api/v1/Person/Delegate/Existing": {
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Adds an existing person as a delegate for a person",
        "requestBody": {
          "description": "Model to add a person's delegate",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.AddExistingDelegateCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.AddExistingDelegateCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.AddExistingDelegateCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.AddExistingDelegateCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the delegate was added successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to add a delegate for the person"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add the delegate to the person"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Location/{locationId}/Engagement": {
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Updates a person's engagement location",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Id of the location",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the engagement location was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the engagement location"
          }
        }
      }
    },
    "/api/v1/Person/Delegate/eVisitAccess": {
      "patch": {
        "tags": [
          "Person"
        ],
        "summary": "Grant eVisit access to a person's delegate",
        "requestBody": {
          "description": "Model to grant eVisit access to a person's delegate",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.GrantDelegateEVisitAccessCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.GrantDelegateEVisitAccessCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.GrantDelegateEVisitAccessCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Delegates.GrantDelegateEVisitAccessCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the eVisit access was granted successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission grant eVisit access"
          },
          "404": {
            "description": "If the user is not a delegate of the person"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to grant eVisit access to the person's delegate"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Queue/{queueId}/Remove": {
      "delete": {
        "tags": [
          "Person"
        ],
        "summary": "Removes a queue from a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "The Id of the queue",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to remove the person from the queue"
          },
          "201": {
            "description": "When the person was removed from the queue successfully"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Queue/{queueId}/Add": {
      "post": {
        "tags": [
          "Person"
        ],
        "summary": "Adds a queue to a person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "The Id of the queue",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "When the person was added to the queue successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add the person to the queue"
          }
        }
      }
    },
    "/api/v1/Person/EngagementNote": {
      "patch": {
        "tags": [
          "Person"
        ],
        "summary": "Updates a person's engagement note",
        "requestBody": {
          "description": "Model to update a person's engagement note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SavePersonEngagementNoteCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SavePersonEngagementNoteCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SavePersonEngagementNoteCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SavePersonEngagementNoteCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the engagement note was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the engagement note"
          }
        }
      }
    },
    "/api/v1/persons/designations": {
      "post": {
        "tags": [
          "PersonDesignations"
        ],
        "summary": "Returns a list of providers with their associated designations.",
        "requestBody": {
          "description": "Model to retrieve the list of persons",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonDesignations.GetPersonDesignationsQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonDesignations.GetPersonDesignationsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonDesignations.GetPersonDesignationsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonDesignations.GetPersonDesignationsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of persons and the count",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.PersonDesignationResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.PersonDesignationResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Models.PersonDesignationResource"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of persons"
          }
        }
      }
    },
    "/api/v1/Roster": {
      "get": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Retrieves a list of rosters",
        "responses": {
          "200": {
            "description": "Returns a list of all rosters",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.GetRostersRosterSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.GetRostersRosterSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.GetRostersRosterSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve rosters"
          },
          "500": {
            "description": "If the server failed to retrieve the list of rosters"
          }
        }
      }
    },
    "/api/v1/Me/Roster": {
      "get": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Retrieves a list of rosters belonging to the logged-in user",
        "responses": {
          "200": {
            "description": "Returns a list of rosters belonging to the logged-in user",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.PersonRosterSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.PersonRosterSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.PersonRosterSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve rosters"
          },
          "500": {
            "description": "If the server failed to retrieve the list of rosters"
          }
        }
      }
    },
    "/api/v1/Person/{personId}/Roster": {
      "get": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Retrieves a list of rosters containing a specific person",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of rosters containing a specific person",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.GetRostersContainingPersonRosterSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.GetRostersContainingPersonRosterSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.GetRostersContainingPersonRosterSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve rosters"
          },
          "500": {
            "description": "If the server failed to retrieve the list of rosters"
          }
        }
      }
    },
    "/api/v1/Roster/{rosterId}/Person": {
      "get": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Retrieves a list of people in a specific roster",
        "parameters": [
          {
            "name": "rosterId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of people in a specific roster",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.PersonSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.PersonSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.PersonRosters.PersonSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve the people list"
          },
          "500": {
            "description": "If the server failed to retrieve the list of people"
          }
        }
      },
      "put": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Adds a list of persons for a roster",
        "parameters": [
          {
            "name": "rosterId",
            "in": "path",
            "description": "Id of the roster",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Model to add a list of persons for a roster",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.AddPersonToRosterCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.AddPersonToRosterCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.AddPersonToRosterCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.AddPersonToRosterCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the list of persons was added successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to add the persons for the roster"
          },
          "404": {
            "description": "If the roster or the persons to be added cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add the persons for the roster"
          }
        }
      },
      "patch": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Removes a list of persons from a roster",
        "parameters": [
          {
            "name": "rosterId",
            "in": "path",
            "description": "rosterId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Model to remove a list of persons from the roster",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.RemovePersonFromRosterCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.RemovePersonFromRosterCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.RemovePersonFromRosterCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.RemovePersonFromRosterCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the list of persons was removed successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to remove the persons from the roster"
          },
          "404": {
            "description": "If the roster or the persons to be removed cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to remove the persons from the roster"
          }
        }
      }
    },
    "/api/v1/Roster/{rosterId}": {
      "post": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Creates a new roster",
        "parameters": [
          {
            "name": "rosterId",
            "in": "path",
            "description": "Id of the roster",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Model to create a roster",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.CreateRosterCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.CreateRosterCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.CreateRosterCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.CreateRosterCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the roster was created successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to create a roster"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to create the roster"
          }
        }
      },
      "put": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Updates a roster",
        "parameters": [
          {
            "name": "rosterId",
            "in": "path",
            "description": "Id of roster",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Model to update a roster",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.UpdateRosterCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.UpdateRosterCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.UpdateRosterCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.PersonRosters.UpdateRosterCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the roster was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to update the roster"
          },
          "404": {
            "description": "If the roster cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the roster"
          }
        }
      }
    },
    "/api/v1/Roster/{rosterId}/Person/{personId}": {
      "put": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Adds a person to a roster",
        "parameters": [
          {
            "name": "rosterId",
            "in": "path",
            "description": "Id of the roster",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the person was added successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to add the person for the roster"
          },
          "404": {
            "description": "If the roster or the person to be added cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add the person for the roster"
          }
        }
      },
      "patch": {
        "tags": [
          "PersonRoster"
        ],
        "summary": "Removes a person from a roster",
        "parameters": [
          {
            "name": "rosterId",
            "in": "path",
            "description": "Id of the roster",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Id of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the person was removed successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to remove the person from the roster"
          },
          "404": {
            "description": "If the roster or the person to be removed cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to remove the person from the roster"
          }
        }
      }
    },
    "/api/v1/Queue/Info": {
      "get": {
        "tags": [
          "Queue"
        ],
        "summary": "Retrieves information about a Queue",
        "requestBody": {
          "description": "Model to retrieve the queue",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Queue.GetQueueQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Queue.GetQueueQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Queue.GetQueueQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Queue.GetQueueQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns information about the Queue requested",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Queue.QueueResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Queue.QueueResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Queue.QueueResource"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the queue"
          }
        }
      }
    },
    "/api/v1/Queue/Add": {
      "post": {
        "tags": [
          "Queue"
        ],
        "summary": "Create a queue",
        "requestBody": {
          "description": "Model to create a new Queue",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Queues.AddQueueCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Queues.AddQueueCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Queues.AddQueueCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Queues.AddQueueCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "When the queue was created successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized to create a new queue"
          },
          "409": {
            "description": "If the queue already exists"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to create the queue"
          }
        }
      }
    },
    "/api/v1/Queue/{queueId}/Update": {
      "put": {
        "tags": [
          "Queue"
        ],
        "summary": "Updates a Queue's entity data",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Id of the queue",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Model to update a Queue's data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Queues.UpdateQueueCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Queues.UpdateQueueCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Queues.UpdateQueueCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Queues.UpdateQueueCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the queue was updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user does not have permission to update the queue"
          },
          "404": {
            "description": "If the queue to be updated cannot be found"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to update the queue"
          }
        }
      }
    },
    "/api/v1/Report/Download": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Retrieves a URL to retrieve a spreadsheet with report data.",
        "responses": {
          "200": {
            "description": "Returns the URL for the report data spreadsheet",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "403": {
            "description": "If the user is not authorized to retrieve the report data"
          },
          "500": {
            "description": "If the server failed to retrieve the report data"
          }
        }
      }
    },
    "/api/v1/Task/Download": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the URL to download a CSV of task data",
        "requestBody": {
          "description": "Ids of the tasks",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a URL to download a CSV of task data",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the download URL"
          }
        }
      }
    },
    "/api/v1/Task/List/Me": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves a list of tasks",
        "responses": {
          "200": {
            "description": "Returns a list of tasks",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.TaskList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.TaskList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.TaskList"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of tasks"
          }
        }
      }
    },
    "/api/v1/Task/List": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves a list of tasks",
        "requestBody": {
          "description": "Model to filter the tasks by",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetTaskListQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetTaskListQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetTaskListQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.GetTaskListQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of tasks",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.TaskList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.TaskList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Lists.TaskList"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the list of tasks"
          }
        }
      }
    },
    "/api/v1/Task/Details": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves details for a task",
        "requestBody": {
          "description": "Model to retrieve a tasks details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskDetailsQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskDetailsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskDetailsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskDetailsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a task's details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.TaskDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.TaskDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Engagements.TaskDetails"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "404": {
            "description": "If the task could not be found"
          },
          "500": {
            "description": "If the server failed to retrieve the task's details"
          }
        }
      }
    },
    "/api/v1/Campaign/Task": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create or update a task",
        "requestBody": {
          "description": "Model to create or update a task",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveTaskCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveTaskCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveTaskCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Novari.Identity.Commands.ProviderRegistry.Engagements.SaveTaskCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the task was created or updated successfully"
          },
          "400": {
            "description": "When the request model failed validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FluentValidation.Results.ValidationFailure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized to create or update tasks"
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to add or update the task"
          }
        }
      }
    },
    "/api/v1/Me/Menubar": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve the currently logged in user's menu bar details",
        "responses": {
          "200": {
            "description": "Returns the user's menu bar details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Menu.UserMenuBarDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Menu.UserMenuBarDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Menu.UserMenuBarDetails"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the user's menu bar details"
          }
        }
      }
    },
    "/api/v1/Me/ApplicationVariables": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve the currently logged in user's application variables",
        "responses": {
          "200": {
            "description": "Returns the application variables",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.ApplicationVariables"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.ApplicationVariables"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.ApplicationVariables"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated with the application"
          },
          "500": {
            "description": "If the server failed to retrieve the  application variables"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FluentValidation.Results.ValidationFailure": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "attemptedValue": {
            "nullable": true
          },
          "customState": {
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/FluentValidation.Severity"
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "formattedMessagePlaceholderValues": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FluentValidation.Severity": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Microsoft.Win32.SafeHandles.SafeWaitHandle": {
        "type": "object",
        "properties": {
          "isClosed": {
            "type": "boolean",
            "readOnly": true
          },
          "isInvalid": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Communications.SendCommunicationCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "fromEmail": {
            "type": "string",
            "nullable": true
          },
          "recipientName": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "emailContent": {
            "type": "string",
            "nullable": true
          },
          "faxContent": {
            "type": "string",
            "nullable": true
          },
          "attachment": {
            "type": "string",
            "nullable": true
          },
          "attachmentName": {
            "type": "string",
            "nullable": true
          },
          "recipientsFilter": {
            "type": "string",
            "nullable": true
          },
          "timeToSend": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Delegates.AddExistingDelegateCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "delegateId": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "canReceivePCMCommunication": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Delegates.AddNewDelegateCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "delegate": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "canReceivePCMCommunication": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Delegates.GrantDelegateEVisitAccessCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "delegateId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Delegates.RemoveDelegateCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "delegateId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Engagements.ActivateCampaignCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Engagements.AddInteractionCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interactionTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "interactionInitiatorId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "personId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "waitTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Engagements.CompleteCampaignCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Engagements.DeleteInteractionCommand": {
        "type": "object",
        "properties": {
          "interactionId": {
            "type": "string",
            "format": "uuid"
          },
          "interaction": {
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Engagements.SaveCampaignCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Engagements.SaveNoteCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "noteText": {
            "type": "string",
            "nullable": true
          },
          "interactionId": {
            "type": "string",
            "format": "uuid"
          },
          "noteTagIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Engagements.SavePersonEngagementNoteCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "noteText": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Engagements.SaveTaskCommand": {
        "type": "object",
        "properties": {
          "task": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Task"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "personTask": {
            "$ref": "#/components/schemas/Novari.Identity.Models.PersonTask"
          },
          "campaignId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "taskTags": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "completedInteractionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Engagements.UpdateInteractionCommand": {
        "type": "object",
        "properties": {
          "interaction": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Interaction"
          },
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.ListFilters.DeleteUserListFilterCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.ListFilters.SaveUserListFilterCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "filterName": {
            "type": "string",
            "nullable": true
          },
          "filter": {
            "type": "string",
            "nullable": true
          },
          "filterType": {
            "$ref": "#/components/schemas/Novari.Identity.Models.FilterType"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Locations.AddLocationCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "locationTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationDetailsCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "locationTypeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "type": "string",
            "nullable": true
          },
          "aptSuite": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "provinceId": {
            "type": "string",
            "format": "uuid"
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "healthNetworkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "accessibilityIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "phoneNumberEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
            },
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationHoursCommand": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "hoursOfOperation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.HoursOfOperation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Locations.SaveLocationQueuesCommand": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "queues": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Locations.UpdateLocationHasAtcFlagCommand": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "hasATC": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Locations.UpdateParentLocationCommand": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "parentLocationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Organizations.SaveOrganizationDetailsCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organizationDescription": {
            "type": "string",
            "nullable": true
          },
          "organizationTypeId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.PersonRosters.AddPersonToRosterCommand": {
        "type": "object",
        "properties": {
          "rosterId": {
            "type": "string",
            "format": "uuid"
          },
          "personIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.PersonRosters.CreateRosterCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.PersonRosters.RemovePersonFromRosterCommand": {
        "type": "object",
        "properties": {
          "rosterId": {
            "type": "string",
            "format": "uuid"
          },
          "personIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.PersonRosters.UpdateRosterCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Persons.AddPersonCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "otherNames": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "genderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "phoneNumberEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDesignationsCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "designationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Persons.SavePersonDetailsCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "otherNames": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "notificationEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "genderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "retiredDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deathDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "movedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "pemId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "communicationPreference": {
            "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
          },
          "contactPreferenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "phoneNumberEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
            },
            "nullable": true
          },
          "technologyIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "culturalCompetencyIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "languageIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "interestIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "hasGivenConsentForCommunications": {
            "type": "boolean"
          },
          "isDiscoverableByPatients": {
            "type": "boolean"
          },
          "providerType": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Metadata.ProviderType"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Persons.UpdateCommunicationPreferenceCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "communicationPreference": {
            "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Persons.UpdatePersonDesignationDetails": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "designationFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.DesignationFieldEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Queues.AddQueueCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Queues.UpdateQueueCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Shared.AddLocationOrganizationXrefCommand": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "locationId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonLocationXrefCommand": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "isPrimaryLocation": {
            "type": "boolean"
          },
          "isEmergencyAffiliation": {
            "type": "boolean"
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "faxNumber": {
            "type": "string",
            "nullable": true
          },
          "privilegeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "personLocationHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonLocationReccurrence"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Shared.AddPersonOrganizationXrefCommand": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "isLeadPhysician": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Shared.RemoveLocationOrganizationXrefCommand": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "locationId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonLocationXrefCommand": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Shared.RemovePersonOrganizationXrefCommand": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonLocationXrefCommand": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "isPrimaryLocation": {
            "type": "boolean"
          },
          "isEngagementLocation": {
            "type": "boolean"
          },
          "isEmergencyAffiliation": {
            "type": "boolean"
          },
          "isHospitalist": {
            "type": "boolean"
          },
          "isFocusedPractice": {
            "type": "boolean"
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "faxNumber": {
            "type": "string",
            "nullable": true
          },
          "privilegeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "personLocationHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonLocationReccurrence"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Commands.ProviderRegistry.Shared.UpdatePersonOrganizationXrefCommand": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "isLeadPhysician": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Accessibility": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Account": {
        "type": "object",
        "properties": {
          "clusterId": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "isAccountClosed": {
            "type": "boolean"
          },
          "accountClosed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "closureDetails": {
            "type": "string",
            "nullable": true
          },
          "isLoginAllowed": {
            "type": "boolean"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isAccountVerified": {
            "type": "boolean"
          },
          "verificationKeySent": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isHIC": {
            "type": "boolean"
          },
          "hasAcceptedTermsForERequestEula": {
            "type": "boolean",
            "deprecated": true
          },
          "hasAcceptedTermsForERequestHinp": {
            "type": "boolean",
            "nullable": true,
            "deprecated": true
          },
          "hasAcceptedTermsForEVisitEula": {
            "type": "boolean",
            "deprecated": true
          },
          "hasAcceptedTermsForEVisitHinp": {
            "type": "boolean",
            "deprecated": true
          },
          "accountTenant": {
            "$ref": "#/components/schemas/Novari.Identity.Models.AccountTenant"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.AccountApproval": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "approvedByPersonId": {
            "type": "string",
            "format": "uuid"
          },
          "approvedDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "wasApproved": {
            "type": "boolean"
          },
          "approvalComment": {
            "type": "string",
            "nullable": true
          },
          "accountApprovalMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "accountApprovalMethod": {
            "$ref": "#/components/schemas/Novari.Identity.Models.AccountApprovalMethod"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.AccountApprovalMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "methodDescription": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "accountApproval": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.AccountApproval"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.AccountApprovalNote": {
        "type": "object",
        "properties": {
          "approvalNoteId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "approvalNoteText": {
            "type": "string",
            "nullable": true
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "createdByPersonId": {
            "type": "string",
            "format": "uuid"
          },
          "createdByPerson": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.AccountTenant": {
        "required": [
          "personId"
        ],
        "type": "object",
        "properties": {
          "clusterId": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "account": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Account"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Api.DesignationResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "localizationFluentId": {
            "type": "string",
            "nullable": true
          },
          "designationDesc": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Campaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.CommunicationPreference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "delegateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "locationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "communicationMethod": {
            "$ref": "#/components/schemas/Novari.Platform.Models.CommunicationMethod"
          },
          "communicationType": {
            "$ref": "#/components/schemas/Novari.Platform.Models.CommunicationType"
          },
          "phoneNumberEntryId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "delegate": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "location": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Location"
          },
          "phoneNumberEntry": {
            "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.ContactPreference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Country": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "countryName": {
            "type": "string",
            "nullable": true
          },
          "activeFlag": {
            "type": "integer",
            "format": "int32"
          },
          "abbreviation": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Location"
            },
            "nullable": true
          },
          "province": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Province"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.CulturalCompetency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Designation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "designationDesc": {
            "type": "string",
            "nullable": true
          },
          "localizationFluentId": {
            "type": "string",
            "nullable": true
          },
          "activeFlag": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "designationFieldXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.DesignationFieldXref"
            },
            "nullable": true
          },
          "personDesignationXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonDesignationXref"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.DesignationField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "designationFieldDesc": {
            "type": "string",
            "nullable": true
          },
          "designationFieldInputType": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "collegeURL": {
            "type": "string",
            "nullable": true
          },
          "designationFieldEntry": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.DesignationFieldEntry"
            },
            "nullable": true
          },
          "designationFieldXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.DesignationFieldXref"
            },
            "nullable": true
          },
          "designationFieldRoleXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.DesignationFieldRoleXref"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.DesignationFieldEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "designationFieldId": {
            "type": "string",
            "format": "uuid"
          },
          "designationFieldEntryValue": {
            "type": "string",
            "nullable": true
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "designationField": {
            "$ref": "#/components/schemas/Novari.Identity.Models.DesignationField"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.DesignationFieldRoleXref": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "designationFieldId": {
            "type": "string",
            "format": "uuid"
          },
          "roleId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "designationField": {
            "$ref": "#/components/schemas/Novari.Identity.Models.DesignationField"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.DesignationFieldXref": {
        "type": "object",
        "properties": {
          "designationId": {
            "type": "string",
            "format": "uuid"
          },
          "designationFieldId": {
            "type": "string",
            "format": "uuid"
          },
          "designationField": {
            "$ref": "#/components/schemas/Novari.Identity.Models.DesignationField"
          },
          "designation": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Designation"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Facility": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "personFacilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonFacilities"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.FilterModelElement": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "filterType": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "filter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.FilterOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "isListFilter": {
            "type": "boolean"
          },
          "filterType": {
            "$ref": "#/components/schemas/Novari.Identity.Models.FilterType"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "tableName": {
            "type": "string",
            "nullable": true
          },
          "columnName": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "hasLookupList": {
            "type": "boolean"
          },
          "lookupQuery": {
            "type": "string",
            "nullable": true
          },
          "inputMask": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.FilterType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        "type": "integer",
        "format": "int32"
      },
      "Novari.Identity.Models.Gender": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "genderAbbr": {
            "type": "string",
            "nullable": true
          },
          "genderDesc": {
            "type": "string",
            "nullable": true
          },
          "sortOverride": {
            "type": "integer",
            "format": "int32"
          },
          "hasSpecify": {
            "type": "boolean"
          },
          "person": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Person"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.HealthNetwork": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.HoursOfOperation": {
        "type": "object",
        "properties": {
          "recurrenceType": {
            "$ref": "#/components/schemas/Novari.Platform.Services.Recurrence.Models.RecurrenceType"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "nth": {
            "type": "integer",
            "format": "int32"
          },
          "weekDaysOnly": {
            "type": "boolean"
          },
          "sunday": {
            "type": "boolean"
          },
          "monday": {
            "type": "boolean"
          },
          "tuesday": {
            "type": "boolean"
          },
          "wednesday": {
            "type": "boolean"
          },
          "thursday": {
            "type": "boolean"
          },
          "friday": {
            "type": "boolean"
          },
          "saturday": {
            "type": "boolean"
          },
          "instance": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "monthOfYear": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfTheMonth": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/System.DayOfWeek"
          },
          "dayOfWeekOccurence": {
            "$ref": "#/components/schemas/Novari.Platform.Services.Recurrence.Models.DayOfWeekOccurence"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "startTime": {
            "$ref": "#/components/schemas/System.TimeSpan"
          },
          "endTime": {
            "$ref": "#/components/schemas/System.TimeSpan"
          },
          "location": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Location"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Interaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interactionTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "locationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdByPersonId": {
            "type": "string",
            "format": "uuid"
          },
          "interactionInitiatorId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "interactionStatusId": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "waitTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isStoredInSqlDb": {
            "type": "boolean"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "interactionType": {
            "$ref": "#/components/schemas/Novari.Identity.Models.InteractionType"
          },
          "interactionInitiator": {
            "$ref": "#/components/schemas/Novari.Identity.Models.InteractionInitiator"
          },
          "location": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Location"
          },
          "massCommunication": {
            "$ref": "#/components/schemas/Novari.Identity.Models.MassCommunication"
          },
          "interactionPersonXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.InteractionPersonXref"
            },
            "nullable": true
          },
          "interactionStatus": {
            "$ref": "#/components/schemas/Novari.Identity.Models.InteractionStatus"
          },
          "personTask": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonTask"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.InteractionInitiator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.InteractionPersonXref": {
        "type": "object",
        "properties": {
          "interactionId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "interaction": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Interaction"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.InteractionStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "interaction": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Interaction"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.InteractionType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Interest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Language": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "languageDescription": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "hasSpecify": {
            "type": "boolean"
          },
          "person": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Person"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.ListFilter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "filterName": {
            "type": "string",
            "nullable": true
          },
          "filter": {
            "type": "string",
            "nullable": true
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "filterType": {
            "$ref": "#/components/schemas/Novari.Identity.Models.FilterType"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "type": "string",
            "nullable": true
          },
          "aptSuite": {
            "type": "string",
            "nullable": true
          },
          "suburb": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "syncPersonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "locationNotes": {
            "type": "string",
            "nullable": true
          },
          "requestAuthorizationRequired": {
            "type": "boolean",
            "nullable": true
          },
          "receiveAuthorizationRequired": {
            "type": "boolean",
            "nullable": true
          },
          "provinceId": {
            "type": "string",
            "format": "uuid"
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatePersonId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "locationTypeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "healthNetworkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "parentLocationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "hasATC": {
            "type": "boolean"
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "communicationPreference": {
            "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
          },
          "locationType": {
            "$ref": "#/components/schemas/Novari.Identity.Models.LocationType"
          },
          "healthNetwork": {
            "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
          },
          "hasImportConflict": {
            "type": "boolean"
          },
          "province": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Province"
          },
          "parentLocation": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Location"
          },
          "childLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Location"
            },
            "nullable": true
          },
          "lastUpdatePerson": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "personLocationXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonLocationXref"
            },
            "nullable": true
          },
          "locationAccessibilityXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LocationAccessibilityXref"
            },
            "nullable": true
          },
          "locationOrganizationXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LocationOrganizationXref"
            },
            "nullable": true
          },
          "phoneNumberEntry": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
            },
            "nullable": true
          },
          "serviceData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.ServiceData"
            },
            "nullable": true
          },
          "hoursOfOperation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.HoursOfOperation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.LocationAccessibilityXref": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "accessibilityId": {
            "type": "string",
            "format": "uuid"
          },
          "location": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Location"
          },
          "accessibility": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Accessibility"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.LocationOrganizationXref": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "location": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Location"
          },
          "organization": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Organization"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.LocationType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.LookupList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.MassCommunication": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "recipientsFilter": {
            "type": "string",
            "nullable": true
          },
          "timeToSend": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "communicationId": {
            "type": "string",
            "format": "uuid"
          },
          "interactionId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "interaction": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Interaction"
          },
          "massCommunicationAttachment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.MassCommunicationAttachment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.MassCommunicationAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "massCommunicationId": {
            "type": "string",
            "format": "uuid"
          },
          "attachmentName": {
            "type": "string",
            "nullable": true
          },
          "massCommunication": {
            "$ref": "#/components/schemas/Novari.Identity.Models.MassCommunication"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.MenuBar": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "showSearch": {
            "type": "boolean"
          },
          "rosterAccess": {
            "type": "boolean"
          },
          "menuItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.MenuItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.MenuItem": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "nullable": true
          },
          "isExternalLink": {
            "type": "boolean"
          },
          "allowRoles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.NoteTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "isCategory": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "organizationTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "organizationType": {
            "$ref": "#/components/schemas/Novari.Identity.Models.OrganizationType"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.OrganizationType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PEM": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "notificationEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "otherNames": {
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "primaryLanguageId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "oldPersonId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "lastPCAContact": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pemId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "contactPreferenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "hasMatchedImport": {
            "type": "boolean"
          },
          "isDiscoverableByPatients": {
            "type": "boolean"
          },
          "hasGivenConsentForCommunications": {
            "type": "boolean"
          },
          "providerType": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Metadata.ProviderType"
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatePersonId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "lastStatusUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "retiredDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deathDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "movedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "generalRegistrationNumber": {
            "type": "string",
            "nullable": true
          },
          "accountTenant": {
            "$ref": "#/components/schemas/Novari.Identity.Models.AccountTenant"
          },
          "accountApproval": {
            "$ref": "#/components/schemas/Novari.Identity.Models.AccountApproval"
          },
          "contactPreference": {
            "$ref": "#/components/schemas/Novari.Identity.Models.ContactPreference"
          },
          "personEngagementNote": {
            "$ref": "#/components/schemas/Novari.Identity.Models.PersonEngagementNote"
          },
          "genderRef": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Gender"
          },
          "primaryLanguage": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Language"
          },
          "pem": {
            "$ref": "#/components/schemas/Novari.Identity.Models.PEM"
          },
          "lastUpdatePerson": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "accountApprovalNoteCreatedByPerson": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.AccountApprovalNote"
            },
            "nullable": true
          },
          "accountApprovalNotePerson": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.AccountApprovalNote"
            },
            "nullable": true
          },
          "designationFieldEntry": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.DesignationFieldEntry"
            },
            "nullable": true
          },
          "interactionCreatedByPerson": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Interaction"
            },
            "nullable": true
          },
          "interactionPersonXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.InteractionPersonXref"
            },
            "nullable": true
          },
          "lastPersonUpdatedByPerson": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Person"
            },
            "nullable": true
          },
          "lastLocationUpdatedByPerson": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Location"
            },
            "nullable": true
          },
          "personCulturalCompetencyXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonCulturalCompetencyXref"
            },
            "nullable": true
          },
          "personDesignationXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonDesignationXref"
            },
            "nullable": true
          },
          "personFacilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonFacilities"
            },
            "nullable": true
          },
          "personLanguageXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonLanguageXref"
            },
            "nullable": true
          },
          "personLocationXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonLocationXref"
            },
            "nullable": true
          },
          "personOrganizationXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonOrganizationXref"
            },
            "nullable": true
          },
          "personTechnologyXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonTechnologyXref"
            },
            "nullable": true
          },
          "phoneNumberEntry": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
            },
            "nullable": true
          },
          "serviceData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.ServiceData"
            },
            "nullable": true
          },
          "taskCreatedByPerson": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Task"
            },
            "nullable": true
          },
          "personCommunicationPreference": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
            },
            "nullable": true
          },
          "delegateCommunicationPreference": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonCulturalCompetencyXref": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "culturalCompetencyId": {
            "type": "string",
            "format": "uuid"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "culturalCompetency": {
            "$ref": "#/components/schemas/Novari.Identity.Models.CulturalCompetency"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonDesignationResource": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "designations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Api.DesignationResource"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonDesignationXref": {
        "type": "object",
        "properties": {
          "designationId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "designation": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Designation"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonEngagementNote": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "noteText": {
            "type": "string",
            "nullable": true
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonFacilities": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "facilityId": {
            "type": "string",
            "format": "uuid"
          },
          "isDefault": {
            "type": "boolean"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "facility": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Facility"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonLanguageXref": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "languageId": {
            "type": "string",
            "format": "uuid"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "language": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Language"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonLocationReccurrence": {
        "type": "object",
        "properties": {
          "recurrenceType": {
            "$ref": "#/components/schemas/Novari.Platform.Services.Recurrence.Models.RecurrenceType"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "nth": {
            "type": "integer",
            "format": "int32"
          },
          "weekDaysOnly": {
            "type": "boolean"
          },
          "sunday": {
            "type": "boolean"
          },
          "monday": {
            "type": "boolean"
          },
          "tuesday": {
            "type": "boolean"
          },
          "wednesday": {
            "type": "boolean"
          },
          "thursday": {
            "type": "boolean"
          },
          "friday": {
            "type": "boolean"
          },
          "saturday": {
            "type": "boolean"
          },
          "instance": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "monthOfYear": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfTheMonth": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/System.DayOfWeek"
          },
          "dayOfWeekOccurence": {
            "$ref": "#/components/schemas/Novari.Platform.Services.Recurrence.Models.DayOfWeekOccurence"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "personLocationXrefId": {
            "type": "string",
            "format": "uuid"
          },
          "startTime": {
            "$ref": "#/components/schemas/System.TimeSpan"
          },
          "endTime": {
            "$ref": "#/components/schemas/System.TimeSpan"
          },
          "personLocationXref": {
            "$ref": "#/components/schemas/Novari.Identity.Models.PersonLocationXref"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonLocationXref": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "personLocationIndex": {
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "delegateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isPrimaryLocation": {
            "type": "boolean"
          },
          "isEmergencyAffiliation": {
            "type": "boolean"
          },
          "isHospitalist": {
            "type": "boolean"
          },
          "isFocusedPractice": {
            "type": "boolean"
          },
          "location": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Location"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "personLocationReccurrence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonLocationReccurrence"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonOrganizationXref": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isLeadPhysician": {
            "type": "boolean"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "organization": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Organization"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "completed": {
            "type": "boolean"
          },
          "dateCompleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "taskOutcomeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "outcomeDetail": {
            "type": "string",
            "nullable": true
          },
          "completedInteractionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "task": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Task"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "completedInteraction": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Interaction"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PersonTechnologyXref": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "technologyId": {
            "type": "string",
            "format": "uuid"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "technology": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Technology"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PhoneNumberEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "phoneNumberEntryIndex": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumberTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "locationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "personId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Location"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          },
          "phoneNumberType": {
            "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberType"
          },
          "phoneNumberEntryTagXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntryTagXref"
            },
            "nullable": true
          },
          "serviceData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.ServiceData"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PhoneNumberEntryTagXref": {
        "type": "object",
        "properties": {
          "phoneNumberEntryId": {
            "type": "string",
            "format": "uuid"
          },
          "phoneNumberTagId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "phoneNumberEntry": {
            "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
          },
          "phoneNumberTag": {
            "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberTag"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PhoneNumberTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "phoneNumberTagDesc": {
            "type": "string",
            "nullable": true
          },
          "phoneNumberTagDescShort": {
            "type": "string",
            "nullable": true
          },
          "activeFlag": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumberEntryTagXref": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntryTagXref"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.PhoneNumberType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "phoneNumberTypeDesc": {
            "type": "string",
            "nullable": true
          },
          "phoneNumberTypeDescShort": {
            "type": "string",
            "nullable": true
          },
          "activeFlag": {
            "type": "integer",
            "format": "int32"
          },
          "mainPhoneFlag": {
            "type": "integer",
            "format": "int32"
          },
          "faxPhoneFlag": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumberEntry": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Privilege": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Province": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "countryId": {
            "type": "string",
            "format": "uuid"
          },
          "activeFlag": {
            "type": "integer",
            "format": "int32"
          },
          "abbreviation": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "location": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Location"
            },
            "nullable": true
          },
          "country": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Country"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.ServiceData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "serviceId": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "serviceDataValues": {
            "type": "string",
            "nullable": true
          },
          "personId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "locationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Location"
          },
          "person": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.SortModelItem": {
        "type": "object",
        "properties": {
          "colId": {
            "type": "string",
            "nullable": true
          },
          "sort": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "taskTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "createdByPersonId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "recipientsFilter": {
            "type": "string",
            "nullable": true
          },
          "assigneesFilter": {
            "type": "string",
            "nullable": true
          },
          "taskType": {
            "$ref": "#/components/schemas/Novari.Identity.Models.TaskType"
          },
          "createdByPerson": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Person"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.TaskOutcome": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.TaskTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.TaskType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.Technology": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "technologyTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "integer",
            "format": "int32"
          },
          "technologyType": {
            "$ref": "#/components/schemas/Novari.Identity.Models.TechnologyType"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Models.TechnologyType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.ApplicationVariables": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationDetails": {
        "type": "object",
        "properties": {
          "communicationId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "communicationMethod": {
            "$ref": "#/components/schemas/Novari.Platform.Models.CommunicationMethod"
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.CommunicationStatus"
          },
          "lastSentDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "receivedFailures": {
            "type": "integer",
            "format": "int32"
          },
          "isStoredInSqlDb": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationDetailsList": {
        "type": "object",
        "properties": {
          "communicationDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationDetails"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Communications.CommunicationList": {
        "type": "object",
        "properties": {
          "communications": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationDetailsQuery": {
        "type": "object",
        "properties": {
          "cancellationToken": {
            "$ref": "#/components/schemas/System.Threading.CancellationToken"
          },
          "massCommunicationId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Communications.GetCommunicationListQuery": {
        "type": "object",
        "properties": {
          "cancellationToken": {
            "$ref": "#/components/schemas/System.Threading.CancellationToken"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "sortOn": {
            "type": "string",
            "nullable": true
          },
          "sortOrd": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Communications.RecipientSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Dashboard.PeopleSeenCounts": {
        "type": "object",
        "properties": {
          "visited": {
            "type": "integer",
            "format": "int32"
          },
          "unvisited": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Dashboard.TaskCompletion": {
        "type": "object",
        "properties": {
          "taskDescription": {
            "type": "string",
            "nullable": true
          },
          "completedCount": {
            "type": "integer",
            "format": "int32"
          },
          "uncompletedCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Dashboard.UserDashboardConfig": {
        "type": "object",
        "properties": {
          "dashboardSections": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isAnAdminTypeUser": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Dashboard.UserInteractionSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interactionStatusId": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "interactionTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "createdByPersonName": {
            "type": "string",
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Delegates.MatchedDelegate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "lastLogin": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Delegates.PersonDelegates": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "applications": {
            "type": "string",
            "nullable": true
          },
          "hasEVisitAccess": {
            "type": "boolean"
          },
          "hasERequestAccess": {
            "type": "boolean"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.CampaignDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.CampaignTasks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "taskTypeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "taskTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          },
          "recipients": {
            "type": "string",
            "nullable": true
          },
          "recipientsFilter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.GetInteractionLocationLookupsQuery": {
        "type": "object",
        "properties": {
          "personIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "currentlySelectedLocationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskDetailsQuery": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "personIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.GetTaskSummariesQuery": {
        "type": "object",
        "properties": {
          "personIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.InteractionDetails": {
        "type": "object",
        "properties": {
          "interaction": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Interaction"
          },
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
          },
          "createdByPersonName": {
            "type": "string",
            "nullable": true
          },
          "massCommunicationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "userCanDelete": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.InteractionSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interactionStatusId": {
            "type": "string",
            "format": "uuid"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "interactionTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "createdByPersonName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.NoteSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "noteText": {
            "type": "string",
            "nullable": true
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "noteTagIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.PersonLocations": {
        "type": "object",
        "properties": {
          "personLocationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "engagementLocationId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.PersonTaskSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "taskTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "taskTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "completed": {
            "type": "integer",
            "format": "int32"
          },
          "isGrant": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.PersonUnassignedCampaignTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "taskTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "taskTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.TaskDetails": {
        "type": "object",
        "properties": {
          "task": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Task"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "personTask": {
            "$ref": "#/components/schemas/Novari.Identity.Models.PersonTask"
          },
          "taskTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.TaskTag"
            },
            "nullable": true
          },
          "campaignId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isGrant": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Engagements.TaskSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "taskTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "taskTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "personIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "completed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.GetInfiniteScrollPersonListQuery": {
        "type": "object",
        "properties": {
          "cancellationToken": {
            "$ref": "#/components/schemas/System.Threading.CancellationToken"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "startRow": {
            "type": "integer",
            "format": "int32"
          },
          "endRow": {
            "type": "integer",
            "format": "int32"
          },
          "sortModel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.SortModelItem"
            },
            "nullable": true
          },
          "filterModel": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Novari.Identity.Models.FilterModelElement"
            },
            "nullable": true
          },
          "context": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.GetPersonListQuery": {
        "type": "object",
        "properties": {
          "cancellationToken": {
            "$ref": "#/components/schemas/System.Threading.CancellationToken"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "rosterId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "sortOn": {
            "type": "string",
            "nullable": true
          },
          "sortOrd": {
            "type": "string",
            "nullable": true
          },
          "searchString": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.ListFilters.FilterSummary": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "inputMask": {
            "type": "string",
            "nullable": true
          },
          "selectedValue": {
            "type": "string",
            "nullable": true
          },
          "selectedValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "rangeStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "rangeEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.CampaignList": {
        "type": "object",
        "properties": {
          "campaigns": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.DownloadLocationListQuery": {
        "type": "object",
        "properties": {
          "locationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "allSelected": {
            "type": "boolean"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "searchString": {
            "type": "string",
            "nullable": true
          },
          "locationIdsExclude": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.DownloadOrganizationListQuery": {
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "allSelected": {
            "type": "boolean"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "searchString": {
            "type": "string",
            "nullable": true
          },
          "organizationIdsExclude": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.DownloadPersonListQuery": {
        "type": "object",
        "properties": {
          "personIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "allSelected": {
            "type": "boolean"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "searchString": {
            "type": "string",
            "nullable": true
          },
          "rosterId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "personIdsExcluded": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.GetCampaignListQuery": {
        "type": "object",
        "properties": {
          "cancellationToken": {
            "$ref": "#/components/schemas/System.Threading.CancellationToken"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "sortOn": {
            "type": "string",
            "nullable": true
          },
          "sortOrd": {
            "type": "string",
            "nullable": true
          },
          "searchString": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.GetInfiniteScrollLocationListQuery": {
        "type": "object",
        "properties": {
          "cancellationToken": {
            "$ref": "#/components/schemas/System.Threading.CancellationToken"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "startRow": {
            "type": "integer",
            "format": "int32"
          },
          "endRow": {
            "type": "integer",
            "format": "int32"
          },
          "sortModel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.SortModelItem"
            },
            "nullable": true
          },
          "filterModel": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Novari.Identity.Models.FilterModelElement"
            },
            "nullable": true
          },
          "context": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.GetLocationListQuery": {
        "type": "object",
        "properties": {
          "cancellationToken": {
            "$ref": "#/components/schemas/System.Threading.CancellationToken"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "sortOn": {
            "type": "string",
            "nullable": true
          },
          "sortOrd": {
            "type": "string",
            "nullable": true
          },
          "searchString": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.GetOrganizationListQuery": {
        "type": "object",
        "properties": {
          "cancellationToken": {
            "$ref": "#/components/schemas/System.Threading.CancellationToken"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "sortOn": {
            "type": "string",
            "nullable": true
          },
          "sortOrd": {
            "type": "string",
            "nullable": true
          },
          "searchString": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.GetTaskListQuery": {
        "type": "object",
        "properties": {
          "cancellationToken": {
            "$ref": "#/components/schemas/System.Threading.CancellationToken"
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "sortOn": {
            "type": "string",
            "nullable": true
          },
          "sortOrd": {
            "type": "string",
            "nullable": true
          },
          "searchString": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.LocationList": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.OrganizationList": {
        "type": "object",
        "properties": {
          "organizations": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Lists.TaskList": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Locations.LocationAccess": {
        "type": "object",
        "properties": {
          "atcTabAccess": {
            "type": "boolean"
          },
          "eRequestTabAccess": {
            "type": "boolean"
          },
          "communicationsAccess": {
            "type": "boolean"
          },
          "organizationAccess": {
            "type": "boolean"
          },
          "engagementAccess": {
            "type": "boolean"
          },
          "lastUpdateAccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Locations.LocationDetails": {
        "type": "object",
        "properties": {
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "locationTypeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "type": "string",
            "nullable": true
          },
          "aptSuite": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "provinceId": {
            "type": "string",
            "format": "uuid"
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "healthNetworkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "parentHealthNetworkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "childHealthNetworkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "phoneNumberEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
            },
            "nullable": true
          },
          "accessibilityIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "hoursOfOperation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.HoursOfOperation"
            },
            "nullable": true
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatePerson": {
            "type": "string",
            "nullable": true
          },
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationPerson"
            },
            "nullable": true
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationOrganizations"
            },
            "nullable": true
          },
          "locationAccess": {
            "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationAccess"
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Locations.LocationDetailsInfo": {
        "type": "object",
        "properties": {
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "locationType": {
            "type": "string",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "type": "string",
            "nullable": true
          },
          "childHealthNetworkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "healthNetworkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "parentHealthNetworkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "parentLocation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationInfo"
            },
            "nullable": true
          },
          "childLocation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.LocationInfo"
            },
            "nullable": true
          },
          "serviceTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.ServiceType"
            },
            "nullable": true
          },
          "receivingTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Locations.RequisitionType"
            },
            "nullable": true
          },
          "hasATC": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Locations.LocationInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Locations.LocationOrganizations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organizationDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Locations.LocationPerson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isPrimaryLocation": {
            "type": "boolean"
          },
          "isEmergencyAffiliation": {
            "type": "boolean"
          },
          "personDesignations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "privileges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Privilege"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Locations.RequisitionType": {
        "type": "object",
        "properties": {
          "destinationXrefId": {
            "type": "string",
            "format": "uuid"
          },
          "requisitionTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "canRefer": {
            "type": "boolean"
          },
          "canReceive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Locations.ServiceType": {
        "type": "object",
        "properties": {
          "serviceTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "serviceTypeDesc": {
            "type": "string",
            "nullable": true
          },
          "appointmentBookId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Menu.UserMenuBarDetails": {
        "type": "object",
        "properties": {
          "menuBar": {
            "$ref": "#/components/schemas/Novari.Identity.Models.MenuBar"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "headerSource": {
            "type": "string",
            "nullable": true
          },
          "pageTitle": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Metadata.DesignationFields": {
        "type": "object",
        "properties": {
          "designationId": {
            "type": "string",
            "format": "uuid"
          },
          "designationFieldId": {
            "type": "string",
            "format": "uuid"
          },
          "designationFieldDesc": {
            "type": "string",
            "nullable": true
          },
          "designationFieldInputType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Metadata.DesignationList": {
        "type": "object",
        "properties": {
          "designationId": {
            "type": "string",
            "format": "uuid"
          },
          "designationDesc": {
            "type": "string",
            "nullable": true
          },
          "childDesignations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.DesignationList"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Metadata.LocationDetailsLookups": {
        "type": "object",
        "properties": {
          "locationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LocationType"
            },
            "nullable": true
          },
          "provinces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "accessibilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Accessibility"
            },
            "nullable": true
          },
          "phoneNumberTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "organizationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.OrganizationType"
            },
            "nullable": true
          },
          "healthNetworks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.HealthNetwork"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Metadata.PersonDetailsLookups": {
        "type": "object",
        "properties": {
          "genders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "phoneNumberTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "culteralCompetencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.CulturalCompetency"
            },
            "nullable": true
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "locationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LocationType"
            },
            "nullable": true
          },
          "grantOutcomes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.TaskOutcome"
            },
            "nullable": true
          },
          "technologies": {
            "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Metadata.TechnologyLists"
          },
          "peMs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "interests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          },
          "contactPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.ContactPreference"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Metadata.TechnologyLists": {
        "type": "object",
        "properties": {
          "technologies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Technology"
            },
            "nullable": true
          },
          "technologyTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.TechnologyType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationDetails": {
        "type": "object",
        "properties": {
          "organizationDescription": {
            "type": "string",
            "nullable": true
          },
          "organizationTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "organizationTypeDesc": {
            "type": "string",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationMembers"
            },
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationLocations"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationLocations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Organizations.OrganizationMembers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isLeadPhysician": {
            "type": "boolean"
          },
          "personDesignations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.PersonDesignations.GetPersonDesignationsQuery": {
        "type": "object",
        "properties": {
          "personIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.PersonList": {
        "type": "object",
        "properties": {
          "persons": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "communicationAccess": {
            "type": "boolean"
          },
          "downloadAccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.PersonRosters.GetRostersContainingPersonRosterSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.PersonRosters.GetRostersRosterSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.PersonRosters.PersonRosterSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.PersonRosters.PersonSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstname": {
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "type": "string",
            "nullable": true
          },
          "othernames": {
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.EvisitProvider": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "providerLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.ProviderLocation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.LocationPhoneNumber": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "phoneNumberTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.MatchedRecipient": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonAvailableQueues": {
        "type": "object",
        "properties": {
          "queueId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonBasicInformation": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "otherNames": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "genderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "pemId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "contactPreferenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "lastStatusUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastPCAContact": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "retiredDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deathDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "movedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonCommunicationMethods": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "personName": {
            "type": "string",
            "nullable": true
          },
          "delegateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "locationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "phoneNumberEntryId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "phoneNumberTypeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "phoneNumberType": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "communicationMethod": {
            "$ref": "#/components/schemas/Novari.Platform.Models.CommunicationMethod"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonDesignation": {
        "type": "object",
        "properties": {
          "designationId": {
            "type": "string",
            "format": "uuid"
          },
          "designationDesc": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonDesignationFields": {
        "type": "object",
        "properties": {
          "designationFieldId": {
            "type": "string",
            "format": "uuid"
          },
          "designationFieldDesc": {
            "type": "string",
            "nullable": true
          },
          "designationFieldInputType": {
            "type": "string",
            "nullable": true
          },
          "designationFieldEntryValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonDetails": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "otherNames": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "notificationEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "genderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "lastStatusUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastPCAContact": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "retiredDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deathDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "movedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "communicationPreference": {
            "$ref": "#/components/schemas/Novari.Identity.Models.CommunicationPreference"
          },
          "contactPreferenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "pemId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "designations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonDesignation"
            },
            "nullable": true
          },
          "phoneNumberEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
            },
            "nullable": true
          },
          "technologyIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "culturalCompetencyIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "languageIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "interestIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "hasGivenConsentForCommunications": {
            "type": "boolean"
          },
          "isDiscoverableByPatients": {
            "type": "boolean"
          },
          "providerType": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Metadata.ProviderType"
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatePerson": {
            "type": "string",
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonLocation"
            },
            "nullable": true
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonOrganization"
            },
            "nullable": true
          },
          "grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonGrant"
            },
            "nullable": true
          },
          "communicationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.PersonCommunicationMethods"
            },
            "nullable": true
          },
          "userAccess": {
            "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.UserAccess"
          },
          "hasAccount": {
            "type": "boolean"
          },
          "accountId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonEmailMethod": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "personName": {
            "type": "string",
            "nullable": true
          },
          "delegateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "delegateName": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "communicationMethod": {
            "$ref": "#/components/schemas/Novari.Platform.Models.CommunicationMethod"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonGrant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "taskTypeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "completed": {
            "type": "boolean"
          },
          "dateCompleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "outcomeDetail": {
            "type": "string",
            "nullable": true
          },
          "taskOutcomeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "type": "string",
            "nullable": true
          },
          "aptSuite": {
            "type": "string",
            "nullable": true
          },
          "isPrimaryLocation": {
            "type": "boolean"
          },
          "isEngagementLocation": {
            "type": "boolean"
          },
          "isEmergencyAffiliation": {
            "type": "boolean"
          },
          "privileges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Privilege"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonMobileMethod": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "personName": {
            "type": "string",
            "nullable": true
          },
          "delegateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "delegateName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumberEntryId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "communicationMethod": {
            "$ref": "#/components/schemas/Novari.Platform.Models.CommunicationMethod"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PersonOrganization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organizationDescription": {
            "type": "string",
            "nullable": true
          },
          "isLeadPhysician": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.PrimaryLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "type": "string",
            "nullable": true
          },
          "aptSuite": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "provinceId": {
            "type": "string",
            "format": "uuid"
          },
          "locationTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "province": {
            "$ref": "#/components/schemas/Novari.Identity.Models.Province"
          },
          "phoneNumberEntry": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PhoneNumberEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.ProviderLocation": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "aptSuite": {
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "provinceId": {
            "type": "string",
            "format": "uuid"
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.ProviderRegistry.Persons.LocationPhoneNumber"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Persons.UserAccess": {
        "type": "object",
        "properties": {
          "genderAccess": {
            "type": "boolean"
          },
          "personLocationsAccess": {
            "type": "boolean"
          },
          "engagementTabAccess": {
            "type": "boolean"
          },
          "designationDetailsTabAccess": {
            "type": "boolean"
          },
          "accountsTabAccess": {
            "type": "boolean"
          },
          "editAccountDetailsAccess": {
            "type": "boolean"
          },
          "roleTabAccess": {
            "type": "boolean"
          },
          "canEditStatus": {
            "type": "boolean"
          },
          "erequestTabAccess": {
            "type": "boolean"
          },
          "communicationsAccess": {
            "type": "boolean"
          },
          "technologiesAccess": {
            "type": "boolean"
          },
          "additionalInfoAccess": {
            "type": "boolean"
          },
          "grantsAccess": {
            "type": "boolean"
          },
          "organizationAccess": {
            "type": "boolean"
          },
          "delegatesTabAccess": {
            "type": "boolean"
          },
          "rosterTabAccess": {
            "type": "boolean"
          },
          "queuesTabAccess": {
            "type": "boolean"
          },
          "documentTabAccess": {
            "type": "boolean"
          },
          "canEditIsDiscoverableByPatients": {
            "type": "boolean"
          },
          "canEditProviderType": {
            "type": "boolean"
          },
          "lastUpdateAccess": {
            "type": "boolean"
          },
          "isERequestUser": {
            "type": "boolean"
          },
          "isEVisitUser": {
            "type": "boolean"
          },
          "notificationTabAccess": {
            "type": "boolean"
          },
          "notificationEmailAccess": {
            "type": "boolean"
          },
          "showUserPreferencesTab": {
            "type": "boolean"
          },
          "orderEntryTab": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Queue.GetQueueQuery": {
        "type": "object",
        "properties": {
          "queueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Queue.QueueResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Shared.MatchingPerson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "designations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Shared.PersonLocationDetails": {
        "type": "object",
        "properties": {
          "isHospitalist": {
            "type": "boolean"
          },
          "isFocusedPractice": {
            "type": "boolean"
          },
          "isPrimaryLocation": {
            "type": "boolean"
          },
          "isEngagementLocation": {
            "type": "boolean"
          },
          "isEmergencyAffiliation": {
            "type": "boolean"
          },
          "isHospital": {
            "type": "boolean"
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "faxNumber": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "personLocationHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.PersonLocationReccurrence"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.ProviderRegistry.Shared.PersonsById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "designations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.Api.DesignationResource"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.UserProfile.UserDelegatedByPersons": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "otherNames": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "authorizedPractices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Queries.UserProfile.UserDelegatedByPersonsAuthorizedPractice"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Queries.UserProfile.UserDelegatedByPersonsAuthorizedPractice": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Services.ApplicationRoles": {
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Identity.Models.LookupList"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Identity.Services.StatusLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Platform.Models.Api.FilterClause": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "nullable": true
          },
          "operator": {
            "type": "string",
            "nullable": true
          },
          "clauseValue": {
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "filterClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Platform.Models.Api.FilterClause"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Platform.Models.CommunicationMethod": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Novari.Platform.Models.CommunicationStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "Novari.Platform.Models.CommunicationType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Novari.Platform.Models.Metadata.ProviderType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "Novari.Platform.Models.Status": {
        "enum": [
          0,
          1,
          2,
          -6,
          -5,
          -4,
          -3,
          -2,
          -1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Novari.Platform.Services.Recurrence.Models.DayOfWeekOccurence": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "Novari.Platform.Services.Recurrence.Models.RecurrenceType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ActivateAccountCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.AddAccountCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "isHIC": {
            "type": "boolean"
          },
          "clientIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.ChangePasswordSelfServiceCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid",
            "deprecated": true
          },
          "currentPassword": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.DeactivateAccountCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.SaveAccountRolesCommand": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Commands.Accounts.UpdateAccountCommand": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "isMultiFactorAuthenticationRequired": {
            "type": "boolean"
          },
          "isHIC": {
            "type": "boolean"
          },
          "clientIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Commands.Authenticators.AddMobilePhoneAuthenticatorCommand": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "data": {
            "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Models.MobilePhoneAuthenticatorDataResource"
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Models.AuthenticatorCategoryResource`1[[Novari.Sso.PlatformMessaging.Api.V1.Models.MobilePhoneAuthenticatorDataResource, Novari.Sso.PlatformMessaging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Models.MobilePhoneAuthenticatorDataResource"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Models.AuthenticatorType": {
        "enum": [
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Models.ClientLookup": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "format": "uuid"
          },
          "clientDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Models.MobilePhoneAuthenticatorDataResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "authenticatorType": {
            "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Models.AuthenticatorType"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountApplicationAccessQueryResult": {
        "type": "object",
        "properties": {
          "hasERequestAccess": {
            "type": "boolean"
          },
          "hasEVisitAccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountAuthenticatorsQueryResult": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "mobilePhone": {
            "$ref": "#/components/schemas/Novari.Sso.PlatformMessaging.Api.V1.Models.AuthenticatorCategoryResource`1[[Novari.Sso.PlatformMessaging.Api.V1.Models.MobilePhoneAuthenticatorDataResource, Novari.Sso.PlatformMessaging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=null]]"
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Queries.Accounts.GetAccountDetailsQueryResult": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "isLoginAllowed": {
            "type": "boolean"
          },
          "isMultiFactorAuthenticationRequired": {
            "type": "boolean"
          },
          "isHIC": {
            "type": "boolean"
          },
          "clientIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "isSelf": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Novari.Sso.PlatformMessaging.Api.V1.Queries.Clients.GetClientByIdQueryResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "chargebeeCustomerId": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/Novari.Platform.Models.Status"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "System.DayOfWeek": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.IntPtr": {
        "type": "object",
        "additionalProperties": false
      },
      "System.Threading.CancellationToken": {
        "type": "object",
        "properties": {
          "isCancellationRequested": {
            "type": "boolean",
            "readOnly": true
          },
          "canBeCanceled": {
            "type": "boolean",
            "readOnly": true
          },
          "waitHandle": {
            "$ref": "#/components/schemas/System.Threading.WaitHandle"
          }
        },
        "additionalProperties": false
      },
      "System.Threading.WaitHandle": {
        "type": "object",
        "properties": {
          "handle": {
            "$ref": "#/components/schemas/System.IntPtr"
          },
          "safeWaitHandle": {
            "$ref": "#/components/schemas/Microsoft.Win32.SafeHandles.SafeWaitHandle"
          }
        },
        "additionalProperties": false
      },
      "System.TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "hours": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "minutes": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "seconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "openIdConnect",
        "description": "Enter the JWT Authorization header in the value field.",
        "openIdConnectUrl": "https://localhost:44300/"
      }
    }
  }
}